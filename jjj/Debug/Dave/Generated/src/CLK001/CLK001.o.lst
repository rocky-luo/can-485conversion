   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 3
   4              		.fpu fpv4-sp-d16
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 6
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.thumb
  15              		.file	"CLK001.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.Delay,"ax",%progbits
  20              		.align	2
  21              		.thumb
  22              		.thumb_func
  24              	Delay:
  25              	.LFB112:
  26              		.file 1 "../Dave/Generated/src/CLK001/CLK001.c"
   1:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
   2:../Dave/Generated/src/CLK001/CLK001.c **** **  DAVE App Name : CLK001       App Version: 1.0.32               
   3:../Dave/Generated/src/CLK001/CLK001.c **** **  This file is generated by DAVE, User modification to this file will be    **
   4:../Dave/Generated/src/CLK001/CLK001.c **** **  overwritten at the next code generation.                                  **
   5:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
   6:../Dave/Generated/src/CLK001/CLK001.c **** 
   7:../Dave/Generated/src/CLK001/CLK001.c **** 
   8:../Dave/Generated/src/CLK001/CLK001.c **** 
   9:../Dave/Generated/src/CLK001/CLK001.c **** 
  10:../Dave/Generated/src/CLK001/CLK001.c **** /*CODE_BLOCK_BEGIN[CLK001.c]*/
  11:../Dave/Generated/src/CLK001/CLK001.c **** 
  12:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
  13:../Dave/Generated/src/CLK001/CLK001.c ****  Copyright (c) 2013, Infineon Technologies AG                                 **
  14:../Dave/Generated/src/CLK001/CLK001.c ****  All rights reserved.                                                         **
  15:../Dave/Generated/src/CLK001/CLK001.c ****                                                                               **
  16:../Dave/Generated/src/CLK001/CLK001.c ****  Redistribution and use in source and binary forms, with or without           **
  17:../Dave/Generated/src/CLK001/CLK001.c ****  modification,are permitted provided that the following conditions are met:   **
  18:../Dave/Generated/src/CLK001/CLK001.c ****                                                                               **
  19:../Dave/Generated/src/CLK001/CLK001.c ****  *Redistributions of source code must retain the above copyright notice,      **
  20:../Dave/Generated/src/CLK001/CLK001.c ****  this list of conditions and the following disclaimer.                        **
  21:../Dave/Generated/src/CLK001/CLK001.c ****  *Redistributions in binary form must reproduce the above copyright notice,   **
  22:../Dave/Generated/src/CLK001/CLK001.c ****  this list of conditions and the following disclaimer in the documentation    **
  23:../Dave/Generated/src/CLK001/CLK001.c ****  and/or other materials provided with the distribution.                       **
  24:../Dave/Generated/src/CLK001/CLK001.c ****  *Neither the name of the copyright holders nor the names of its contributors **
  25:../Dave/Generated/src/CLK001/CLK001.c ****  may be used to endorse or promote products derived from this software without** 
  26:../Dave/Generated/src/CLK001/CLK001.c ****  specific prior written permission.                                           **
  27:../Dave/Generated/src/CLK001/CLK001.c ****                                                                               **
  28:../Dave/Generated/src/CLK001/CLK001.c ****  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"  **
  29:../Dave/Generated/src/CLK001/CLK001.c ****  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE    **
  30:../Dave/Generated/src/CLK001/CLK001.c ****  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE   **
  31:../Dave/Generated/src/CLK001/CLK001.c ****  ARE  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE   **
  32:../Dave/Generated/src/CLK001/CLK001.c ****  LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         **
  33:../Dave/Generated/src/CLK001/CLK001.c ****  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF         **
  34:../Dave/Generated/src/CLK001/CLK001.c ****  SUBSTITUTE GOODS OR  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS    **
  35:../Dave/Generated/src/CLK001/CLK001.c ****  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN      **
  36:../Dave/Generated/src/CLK001/CLK001.c ****  CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)       **
  37:../Dave/Generated/src/CLK001/CLK001.c ****  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE   **
  38:../Dave/Generated/src/CLK001/CLK001.c ****  POSSIBILITY OF SUCH DAMAGE.                                                  **
  39:../Dave/Generated/src/CLK001/CLK001.c ****                                                                               **
  40:../Dave/Generated/src/CLK001/CLK001.c ****  To improve the quality of the software, users are encouraged to share        **
  41:../Dave/Generated/src/CLK001/CLK001.c ****  modifications, enhancements or bug fixes with Infineon Technologies AG       **
  42:../Dave/Generated/src/CLK001/CLK001.c ****  dave@infineon.com).                                                          **
  43:../Dave/Generated/src/CLK001/CLK001.c ****                                                                               **
  44:../Dave/Generated/src/CLK001/CLK001.c **** ********************************************************************************
  45:../Dave/Generated/src/CLK001/CLK001.c **** **                                                                            **
  46:../Dave/Generated/src/CLK001/CLK001.c **** **                                                                            **
  47:../Dave/Generated/src/CLK001/CLK001.c **** ** PLATFORM : Infineon XMC4000 Series                                         **
  48:../Dave/Generated/src/CLK001/CLK001.c **** **                                                                            **
  49:../Dave/Generated/src/CLK001/CLK001.c **** ** COMPILER : Compiler Independent                                            **
  50:../Dave/Generated/src/CLK001/CLK001.c **** **                                                                            **
  51:../Dave/Generated/src/CLK001/CLK001.c **** ** AUTHOR   : App Developer                                                   **
  52:../Dave/Generated/src/CLK001/CLK001.c **** **                                                                            **
  53:../Dave/Generated/src/CLK001/CLK001.c **** ** MAY BE CHANGED BY USER [Yes/No]: Yes                                       **
  54:../Dave/Generated/src/CLK001/CLK001.c **** **                                                                            **
  55:../Dave/Generated/src/CLK001/CLK001.c **** ** MODIFICATION DATE : Mar 18, 2013                                           **
  56:../Dave/Generated/src/CLK001/CLK001.c **** **                                                                            **
  57:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
  58:../Dave/Generated/src/CLK001/CLK001.c **** /**
  59:../Dave/Generated/src/CLK001/CLK001.c ****  * @file   CLK001.c
  60:../Dave/Generated/src/CLK001/CLK001.c ****  *
  61:../Dave/Generated/src/CLK001/CLK001.c ****  * @brief  SCU_Clock_CLK001 App
  62:../Dave/Generated/src/CLK001/CLK001.c ****  *         
  63:../Dave/Generated/src/CLK001/CLK001.c ****  *  CLK001 App is a singleton app which is used by all applications to configure 
  64:../Dave/Generated/src/CLK001/CLK001.c ****  *  the PLL as well as enable the Clock of Peripheral Units.
  65:../Dave/Generated/src/CLK001/CLK001.c ****  
  66:../Dave/Generated/src/CLK001/CLK001.c ****  * Revision History
  67:../Dave/Generated/src/CLK001/CLK001.c ****  * 12 Dec 2012   v1.0.1    modified to take care java.utils and basecode updates
  68:../Dave/Generated/src/CLK001/CLK001.c ****  * 18 Mar 2013   v1.0.30   modified to limit maximum frequency 48MHz for XMC42xx
  69:../Dave/Generated/src/CLK001/CLK001.c ****  
  70:../Dave/Generated/src/CLK001/CLK001.c ****  *
  71:../Dave/Generated/src/CLK001/CLK001.c ****  */
  72:../Dave/Generated/src/CLK001/CLK001.c **** 
  73:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
  74:../Dave/Generated/src/CLK001/CLK001.c **** **                      Author(s) Identity                                    **
  75:../Dave/Generated/src/CLK001/CLK001.c **** ********************************************************************************
  76:../Dave/Generated/src/CLK001/CLK001.c **** **                                                                            **
  77:../Dave/Generated/src/CLK001/CLK001.c **** ** Initials     Name                                                          **
  78:../Dave/Generated/src/CLK001/CLK001.c **** ** ---------------------------------------------------------------------------**
  79:../Dave/Generated/src/CLK001/CLK001.c **** ** RS           App Developer                                                 **
  80:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
  81:../Dave/Generated/src/CLK001/CLK001.c **** 
  82:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
  83:../Dave/Generated/src/CLK001/CLK001.c ****  ** INCLUDE FILES                                                             **
  84:../Dave/Generated/src/CLK001/CLK001.c ****  ******************************************************************************/
  85:../Dave/Generated/src/CLK001/CLK001.c **** /** Inclusion of header file */
  86:../Dave/Generated/src/CLK001/CLK001.c **** #include <DAVE3.h>
  87:../Dave/Generated/src/CLK001/CLK001.c **** 
  88:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
  89:../Dave/Generated/src/CLK001/CLK001.c **** **                      Private Macro Definitions                             **
  90:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
  91:../Dave/Generated/src/CLK001/CLK001.c **** 
  92:../Dave/Generated/src/CLK001/CLK001.c **** /* Various options for CLK tree settings*/
  93:../Dave/Generated/src/CLK001/CLK001.c **** 
  94:../Dave/Generated/src/CLK001/CLK001.c **** /*Main PLL input clock options*/
  95:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_CRYSTAL                1U
  96:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_EXT_CLOCK              2U
  97:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_BACK_UP_CLOCK          3U
  98:../Dave/Generated/src/CLK001/CLK001.c **** 
  99:../Dave/Generated/src/CLK001/CLK001.c **** /*Options for back up clock trimming*/
 100:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_TRIM_FACTORY           1U
 101:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_TRIM_AUTOMATIC         2U
 102:../Dave/Generated/src/CLK001/CLK001.c **** 
 103:../Dave/Generated/src/CLK001/CLK001.c **** /*options for system clock source*/
 104:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_SRC_PLL            1U
 105:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_SRC_BACKUP         2U
 106:../Dave/Generated/src/CLK001/CLK001.c **** 
 107:../Dave/Generated/src/CLK001/CLK001.c **** /*options for PLL modes*/
 108:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_PLL_NORMAL         1U
 109:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_PLL_PRESCALER      2U
 110:../Dave/Generated/src/CLK001/CLK001.c **** 
 111:../Dave/Generated/src/CLK001/CLK001.c **** /*options for STDBY clock source*/
 112:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_HIB_CLOCK_FOSI          1U
 113:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_HIB_CLOCK_OSCULP        2U
 114:../Dave/Generated/src/CLK001/CLK001.c **** 
 115:../Dave/Generated/src/CLK001/CLK001.c **** 
 116:../Dave/Generated/src/CLK001/CLK001.c **** /* MAIN PLL setup parameters */  
 117:../Dave/Generated/src/CLK001/CLK001.c **** 
 118:../Dave/Generated/src/CLK001/CLK001.c **** 
 119:../Dave/Generated/src/CLK001/CLK001.c **** #define   CLK001_PLL_K1DIV        0U
 120:../Dave/Generated/src/CLK001/CLK001.c **** #define   CLK001_PLL_K2DIV        3U      
 121:../Dave/Generated/src/CLK001/CLK001.c **** #define   CLK001_PLL_PDIV         0U    
 122:../Dave/Generated/src/CLK001/CLK001.c **** #define   CLK001_PLL_NDIV         39U  
 123:../Dave/Generated/src/CLK001/CLK001.c **** #define   CLK001_PLL_K2DIV_STEP_1    19  /*PLL output is 24Mhz*/  
 124:../Dave/Generated/src/CLK001/CLK001.c **** #define   CLK001_PLL_K2DIV_STEP_2    7  /*PLL output to 60Mhz*/  
 125:../Dave/Generated/src/CLK001/CLK001.c **** #define   CLK001_PLL_K2DIV_STEP_3    4  /*PLL output to 96Mhz*/  
 126:../Dave/Generated/src/CLK001/CLK001.c **** 
 127:../Dave/Generated/src/CLK001/CLK001.c **** /* USB PLL setup parameters */
 128:../Dave/Generated/src/CLK001/CLK001.c **** #define   CLK001_USBPLL_PDIV      1U
 129:../Dave/Generated/src/CLK001/CLK001.c **** #define   CLK001_USBPLL_NDIV      63U
 130:../Dave/Generated/src/CLK001/CLK001.c **** #define   CLK001_USBDIV           3U
 131:../Dave/Generated/src/CLK001/CLK001.c **** 
 132:../Dave/Generated/src/CLK001/CLK001.c **** 
 133:../Dave/Generated/src/CLK001/CLK001.c **** 
 134:../Dave/Generated/src/CLK001/CLK001.c **** /*Main PLL input clock configuration*/
 135:../Dave/Generated/src/CLK001/CLK001.c **** #define  CLK001_PLL_CLOCK_INPUT  CLK001_CLOCK_CRYSTAL
 136:../Dave/Generated/src/CLK001/CLK001.c **** 
 137:../Dave/Generated/src/CLK001/CLK001.c **** /*Oscillator mode = External Crystal Mode*/
 138:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_OSC_HP_MODE  0x0U
 139:../Dave/Generated/src/CLK001/CLK001.c **** 
 140:../Dave/Generated/src/CLK001/CLK001.c **** /*Standby clock source configuration*/
 141:../Dave/Generated/src/CLK001/CLK001.c **** #define  CLK001_STANDBY_CLOCK  CLK001_HIB_CLOCK_FOSI
 142:../Dave/Generated/src/CLK001/CLK001.c **** 
 143:../Dave/Generated/src/CLK001/CLK001.c **** /*Back up clock trimming option*/
 144:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_TRIM_OPTION CLK001_CLOCK_TRIM_AUTOMATIC
 145:../Dave/Generated/src/CLK001/CLK001.c **** 
 146:../Dave/Generated/src/CLK001/CLK001.c **** /*System clock source configuration*/
 147:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_SYS_SRC CLK001_CLOCK_SRC_PLL 
 148:../Dave/Generated/src/CLK001/CLK001.c **** 
 149:../Dave/Generated/src/CLK001/CLK001.c **** /*PLL mode configuration*/
 150:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_PLL_MODE CLK001_CLOCK_PLL_NORMAL
 151:../Dave/Generated/src/CLK001/CLK001.c **** 
 152:../Dave/Generated/src/CLK001/CLK001.c **** /*Values of various parameters based on UI selction*/
 153:../Dave/Generated/src/CLK001/CLK001.c **** 
 154:../Dave/Generated/src/CLK001/CLK001.c **** /*system clock frequency*/
 155:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_CLOCK_FSYS                    120000000U
 156:../Dave/Generated/src/CLK001/CLK001.c **** 
 157:../Dave/Generated/src/CLK001/CLK001.c **** /*crystal or digital clock input frequency*/
 158:../Dave/Generated/src/CLK001/CLK001.c **** #define  CLK001_CLOCK_CRYSTAL_FREQUENCY      12000000U     
 159:../Dave/Generated/src/CLK001/CLK001.c **** 
 160:../Dave/Generated/src/CLK001/CLK001.c **** /*back up clock frequency*/
 161:../Dave/Generated/src/CLK001/CLK001.c **** #define  CLK001_CLOCK_BACK_UP                24000000U
 162:../Dave/Generated/src/CLK001/CLK001.c **** 
 163:../Dave/Generated/src/CLK001/CLK001.c **** /*Reference frequency for sytem oscillator watch dog - 2.5 MHz*/
 164:../Dave/Generated/src/CLK001/CLK001.c **** #define  CLK001_SOSCWDG_FREF                 2500000U
 165:../Dave/Generated/src/CLK001/CLK001.c **** 
 166:../Dave/Generated/src/CLK001/CLK001.c **** /*Regiser bit field mask to check if Oscillator is usable*/
 167:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_PLLSTAT_OSC_USABLE_MASK       (SCU_PLL_PLLSTAT_PLLHV_Msk | \
 168:../Dave/Generated/src/CLK001/CLK001.c ****                                               SCU_PLL_PLLSTAT_PLLLV_Msk | \
 169:../Dave/Generated/src/CLK001/CLK001.c ****                                               SCU_PLL_PLLSTAT_PLLSP_Msk)
 170:../Dave/Generated/src/CLK001/CLK001.c **** 
 171:../Dave/Generated/src/CLK001/CLK001.c **** /*delay values used in the below calculation
 172:../Dave/Generated/src/CLK001/CLK001.c **** these are to be used with the delay function defined in this file
 173:../Dave/Generated/src/CLK001/CLK001.c **** they are approximate values based on measurement*/
 174:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_DELAY_CNT_50US_50MHZ        100U
 175:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_DELAY_CNT_50US_90MHZ        150U
 176:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_DELAY_CNT_8US_50MHZ         10U
 177:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_LOOP_CNT_150MS              18000U /*150ms / 8us*/
 178:../Dave/Generated/src/CLK001/CLK001.c **** 
 179:../Dave/Generated/src/CLK001/CLK001.c **** /*values for PLL frequency stepping*/
 180:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_PLL_FREQ_STEP1               (24U * 1000U * 1000U)
 181:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_PLL_FREQ_STEP2               (60U * 1000U * 1000U)
 182:../Dave/Generated/src/CLK001/CLK001.c **** #define CLK001_PLL_FREQ_STEP3               (90U * 1000U * 1000U)
 183:../Dave/Generated/src/CLK001/CLK001.c **** 
 184:../Dave/Generated/src/CLK001/CLK001.c **** 
 185:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
 186:../Dave/Generated/src/CLK001/CLK001.c **** **                      Private Type Definitions                              **
 187:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
 188:../Dave/Generated/src/CLK001/CLK001.c **** 
 189:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
 190:../Dave/Generated/src/CLK001/CLK001.c **** **                 Private Function Declarations:
 191:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
 192:../Dave/Generated/src/CLK001/CLK001.c **** static void Delay(uint32_t time_1);
 193:../Dave/Generated/src/CLK001/CLK001.c **** static uint32_t System_Clock_valid(void);
 194:../Dave/Generated/src/CLK001/CLK001.c **** static uint32_t System_Clock_init(void);
 195:../Dave/Generated/src/CLK001/CLK001.c **** 
 196:../Dave/Generated/src/CLK001/CLK001.c **** 
 197:../Dave/Generated/src/CLK001/CLK001.c **** 
 198:../Dave/Generated/src/CLK001/CLK001.c ****  
 199:../Dave/Generated/src/CLK001/CLK001.c **** static void RTC_Clock_init(void);
 200:../Dave/Generated/src/CLK001/CLK001.c **** 
 201:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
 202:../Dave/Generated/src/CLK001/CLK001.c **** **                      Extern Declarations                                   **
 203:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
 204:../Dave/Generated/src/CLK001/CLK001.c **** extern void SystemCoreClockUpdate(void);
 205:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
 206:../Dave/Generated/src/CLK001/CLK001.c **** **                      Global Variable Definitions                           **
 207:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
 208:../Dave/Generated/src/CLK001/CLK001.c **** 
 209:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
 210:../Dave/Generated/src/CLK001/CLK001.c **** **                      Private Constant Definitions                          **
 211:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
 212:../Dave/Generated/src/CLK001/CLK001.c **** 
 213:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
 214:../Dave/Generated/src/CLK001/CLK001.c **** **                 Function like macro definitions                            **
 215:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
 216:../Dave/Generated/src/CLK001/CLK001.c **** 
 217:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
 218:../Dave/Generated/src/CLK001/CLK001.c **** **                      Private Function Definitions                          **
 219:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
 220:../Dave/Generated/src/CLK001/CLK001.c **** /**
 221:../Dave/Generated/src/CLK001/CLK001.c ****   * @brief  Function to delay  
 222:../Dave/Generated/src/CLK001/CLK001.c ****   * @note   -  
 223:../Dave/Generated/src/CLK001/CLK001.c ****   * @param  number of loops
 224:../Dave/Generated/src/CLK001/CLK001.c ****   * @retval None
 225:../Dave/Generated/src/CLK001/CLK001.c ****   */
 226:../Dave/Generated/src/CLK001/CLK001.c **** static void Delay(uint32_t time_1)
 227:../Dave/Generated/src/CLK001/CLK001.c **** {
  27              		.loc 1 227 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 80B4     		push	{r7}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 7, -4
  36 0002 85B0     		sub	sp, sp, #20
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 24
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
 228:../Dave/Generated/src/CLK001/CLK001.c **** 	uint32_t i = 0U;
  43              		.loc 1 228 0
  44 0008 4FF00003 		mov	r3, #0
  45 000c FB60     		str	r3, [r7, #12]
 229:../Dave/Generated/src/CLK001/CLK001.c **** 	for(i=0U; i < time_1;i++)
  46              		.loc 1 229 0
  47 000e 4FF00003 		mov	r3, #0
  48 0012 FB60     		str	r3, [r7, #12]
  49 0014 07E0     		b	.L2
  50              	.L3:
  51              	.LBB10:
  52              	.LBB11:
  53              		.file 2 "C:\\DAVE-3.1.8\\DAVE-3.1.8\\eclipse\\/../CMSIS/Include/core_cmInstr.h"
   1:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /**************************************************************************//**
   2:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @file     core_cmInstr.h
   3:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @version  V3.20
   5:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @date     05. March 2013
   6:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   7:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * @note
   8:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  *
   9:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  ******************************************************************************/
  10:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Copyright (c) 2009 - 2013 ARM LIMITED
  11:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  12:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****    All rights reserved.
  13:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****      specific prior written permission.
  23:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****    *
  24:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  37:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  38:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  41:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  42:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****   Access to dedicated instructions
  45:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****   @{
  46:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** */
  47:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  48:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* ARM armcc specific functions */
  50:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  51:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
  54:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  55:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  56:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
  57:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  58:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  60:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __NOP                             __nop
  61:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  62:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  63:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  65:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     until one of a number of events occurs.
  67:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  68:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFI                             __wfi
  69:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  70:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  71:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Wait For Event
  72:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  73:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  76:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __WFE                             __wfe
  77:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  78:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  79:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Send Event
  80:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  81:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  83:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SEV                             __sev
  84:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  85:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  86:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  88:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     memory, after the instruction has been completed.
  91:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
  92:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  94:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  95:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
  97:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 100:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 102:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 103:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 105:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 108:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 110:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 111:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 113:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 115:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 117:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 118:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __REV                             __rev
 119:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 120:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 121:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 123:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 125:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 127:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 128:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 131:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****   rev16 r0, r0
 132:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 133:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 134:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 135:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 136:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 138:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 140:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 142:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 143:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 146:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****   revsh r0, r0
 147:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****   bx lr
 148:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** }
 149:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 150:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 151:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 152:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 154:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 156:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Rotated value
 159:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 160:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __ROR                             __ror
 161:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 162:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 163:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Breakpoint
 164:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 165:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 168:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 171:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 173:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 174:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if       (__CORTEX_M >= 0x03)
 175:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 176:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 178:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 180:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return               Reversed value
 182:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 183:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __RBIT                            __rbit
 184:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 185:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 186:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 188:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 8 bit value.
 189:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 190:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 193:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 195:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 196:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 198:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 16 bit values.
 199:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 200:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 203:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 205:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 206:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 208:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive LDR command for 32 bit values.
 209:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 210:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 213:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 215:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 216:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 218:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 8 bit values.
 219:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 220:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 221:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 223:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 224:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 225:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 227:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 228:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 230:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 16 bit values.
 231:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 232:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 233:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 235:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 236:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 237:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 239:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 240:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 242:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function performs a exclusive STR command for 32 bit values.
 243:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 244:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to store
 245:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          0  Function succeeded
 247:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return          1  Function failed
 248:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 249:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 251:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 252:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 254:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 256:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 257:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLREX                           __clrex
 258:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 259:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 260:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Signed Saturate
 261:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 262:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates a signed value.
 263:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 264:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 267:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 268:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __SSAT                            __ssat
 269:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 270:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 271:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 273:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function saturates an unsigned value.
 274:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 275:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             Saturated value
 278:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 279:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __USAT                            __usat
 280:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 281:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 282:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  Count leading zeros
 283:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 284:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 286:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     \return             number of leading zeros in value
 288:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 289:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CLZ                             __clz
 290:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 291:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) */
 292:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 293:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 294:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 295:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __ICCARM__ ) /*------------------ ICC Compiler -------------------*/
 296:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* IAR iccarm specific functions */
 297:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 298:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_iar.h>
 299:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 300:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 301:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __TMS470__ ) /*---------------- TI CCS Compiler ------------------*/
 302:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* TI CCS specific functions */
 303:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 304:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #include <cmsis_ccs.h>
 305:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 306:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 307:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 308:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* GNU gcc specific functions */
 309:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 310:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 311:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 312:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 313:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 314:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 315:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 316:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #else
 317:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 318:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 319:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** #endif
 320:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 321:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** /** \brief  No Operation
 322:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** 
 323:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 324:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****  */
 325:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 326:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h **** {
 327:C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include\core_cmInstr.h ****   __ASM volatile ("nop");
  54              		.loc 2 327 0
  55              	@ 327 "C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include/core_cmInstr.h" 1
  56 0016 00BF     		nop
  57              	@ 0 "" 2
  58              		.thumb
  59              	.LBE11:
  60              	.LBE10:
  61              	.LBB12:
  62              	.LBB13:
  63              	@ 327 "C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include/core_cmInstr.h" 1
  64 0018 00BF     		nop
  65              	@ 0 "" 2
  66              		.thumb
  67              	.LBE13:
  68              	.LBE12:
  69              	.LBB14:
  70              	.LBB15:
  71              	@ 327 "C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include/core_cmInstr.h" 1
  72 001a 00BF     		nop
  73              	@ 0 "" 2
  74              		.thumb
  75              	.LBE15:
  76              	.LBE14:
  77              	.LBB16:
  78              	.LBB17:
  79              	@ 327 "C:\DAVE-3.1.8\DAVE-3.1.8\eclipse\/../CMSIS/Include/core_cmInstr.h" 1
  80 001c 00BF     		nop
  81              	@ 0 "" 2
  82              		.thumb
  83              	.LBE17:
  84              	.LBE16:
  85              		.loc 1 229 0
  86 001e FB68     		ldr	r3, [r7, #12]
  87 0020 03F10103 		add	r3, r3, #1
  88 0024 FB60     		str	r3, [r7, #12]
  89              	.L2:
  90              		.loc 1 229 0 is_stmt 0 discriminator 1
  91 0026 FA68     		ldr	r2, [r7, #12]
  92 0028 7B68     		ldr	r3, [r7, #4]
  93 002a 9A42     		cmp	r2, r3
  94 002c F3D3     		bcc	.L3
 230:../Dave/Generated/src/CLK001/CLK001.c **** 	{
 231:../Dave/Generated/src/CLK001/CLK001.c **** 		__NOP();__NOP();__NOP();__NOP();
 232:../Dave/Generated/src/CLK001/CLK001.c **** 	}
 233:../Dave/Generated/src/CLK001/CLK001.c **** 
 234:../Dave/Generated/src/CLK001/CLK001.c **** } 
  95              		.loc 1 234 0 is_stmt 1
  96 002e 07F11407 		add	r7, r7, #20
  97 0032 BD46     		mov	sp, r7
  98 0034 80BC     		pop	{r7}
  99 0036 7047     		bx	lr
 100              		.cfi_endproc
 101              	.LFE112:
 103              		.section	.text.System_Clock_valid,"ax",%progbits
 104              		.align	2
 105              		.thumb
 106              		.thumb_func
 108              	System_Clock_valid:
 109              	.LFB113:
 235:../Dave/Generated/src/CLK001/CLK001.c **** /**
 236:../Dave/Generated/src/CLK001/CLK001.c ****   * @brief  Function to check current MAIN Clock setting based on UI configuration 
 237:../Dave/Generated/src/CLK001/CLK001.c ****   * @note   -  
 238:../Dave/Generated/src/CLK001/CLK001.c ****   * @param  None
 239:../Dave/Generated/src/CLK001/CLK001.c ****   * @retval PASS/FAIL
 240:../Dave/Generated/src/CLK001/CLK001.c ****   */
 241:../Dave/Generated/src/CLK001/CLK001.c **** static uint32_t System_Clock_valid(void)
 242:../Dave/Generated/src/CLK001/CLK001.c **** {
 110              		.loc 1 242 0
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 8
 113              		@ frame_needed = 1, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115 0000 80B4     		push	{r7}
 116              	.LCFI3:
 117              		.cfi_def_cfa_offset 4
 118              		.cfi_offset 7, -4
 119 0002 83B0     		sub	sp, sp, #12
 120              	.LCFI4:
 121              		.cfi_def_cfa_offset 16
 122 0004 00AF     		add	r7, sp, #0
 123              	.LCFI5:
 124              		.cfi_def_cfa_register 7
 243:../Dave/Generated/src/CLK001/CLK001.c ****   uint32_t MAIN_clock_status = 1U;
 125              		.loc 1 243 0
 126 0006 4FF00103 		mov	r3, #1
 127 000a 7B60     		str	r3, [r7, #4]
 244:../Dave/Generated/src/CLK001/CLK001.c **** 
 245:../Dave/Generated/src/CLK001/CLK001.c ****   /* check if PLL is switched on */
 246:../Dave/Generated/src/CLK001/CLK001.c ****   if((SCU_PLL->PLLCON0 &(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk))!= 0U)
 128              		.loc 1 246 0
 129 000c 44F21073 		movw	r3, #18192
 130 0010 C5F20003 		movt	r3, 20480
 131 0014 5A68     		ldr	r2, [r3, #4]
 132 0016 4FF00203 		mov	r3, #2
 133 001a C0F20103 		movt	r3, 1
 134 001e 1340     		ands	r3, r3, r2
 135 0020 002B     		cmp	r3, #0
 136 0022 02D0     		beq	.L5
 247:../Dave/Generated/src/CLK001/CLK001.c ****   {
 248:../Dave/Generated/src/CLK001/CLK001.c ****     MAIN_clock_status=0U;
 137              		.loc 1 248 0
 138 0024 4FF00003 		mov	r3, #0
 139 0028 7B60     		str	r3, [r7, #4]
 140              	.L5:
 249:../Dave/Generated/src/CLK001/CLK001.c ****   }
 250:../Dave/Generated/src/CLK001/CLK001.c ****   return(MAIN_clock_status);
 141              		.loc 1 250 0
 142 002a 7B68     		ldr	r3, [r7, #4]
 251:../Dave/Generated/src/CLK001/CLK001.c **** }
 143              		.loc 1 251 0
 144 002c 1846     		mov	r0, r3
 145 002e 07F10C07 		add	r7, r7, #12
 146 0032 BD46     		mov	sp, r7
 147 0034 80BC     		pop	{r7}
 148 0036 7047     		bx	lr
 149              		.cfi_endproc
 150              	.LFE113:
 152              		.section	.text.System_Clock_init,"ax",%progbits
 153              		.align	2
 154              		.thumb
 155              		.thumb_func
 157              	System_Clock_init:
 158              	.LFB114:
 252:../Dave/Generated/src/CLK001/CLK001.c **** 
 253:../Dave/Generated/src/CLK001/CLK001.c **** /**
 254:../Dave/Generated/src/CLK001/CLK001.c ****   * @brief  Function to initialize the Main Clock based on UI configuration 
 255:../Dave/Generated/src/CLK001/CLK001.c ****   * @note   -  
 256:../Dave/Generated/src/CLK001/CLK001.c ****   * @param  None
 257:../Dave/Generated/src/CLK001/CLK001.c ****   * @retval PASS/FAIL
 258:../Dave/Generated/src/CLK001/CLK001.c ****   */
 259:../Dave/Generated/src/CLK001/CLK001.c **** static uint32_t System_Clock_init(void)
 260:../Dave/Generated/src/CLK001/CLK001.c **** {
 159              		.loc 1 260 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 16
 162              		@ frame_needed = 1, uses_anonymous_args = 0
 163 0000 80B5     		push	{r7, lr}
 164              	.LCFI6:
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 7, -8
 167              		.cfi_offset 14, -4
 168 0002 84B0     		sub	sp, sp, #16
 169              	.LCFI7:
 170              		.cfi_def_cfa_offset 24
 171 0004 00AF     		add	r7, sp, #0
 172              	.LCFI8:
 173              		.cfi_def_cfa_register 7
 261:../Dave/Generated/src/CLK001/CLK001.c **** 	uint32_t Return_status = 1U;
 174              		.loc 1 261 0
 175 0006 4FF00103 		mov	r3, #1
 176 000a FB60     		str	r3, [r7, #12]
 262:../Dave/Generated/src/CLK001/CLK001.c **** #if ((CLK001_CLOCK_SYS_SRC == CLK001_CLOCK_SRC_PLL) && \
 263:../Dave/Generated/src/CLK001/CLK001.c ****     (CLK001_CLOCK_PLL_MODE == CLK001_CLOCK_PLL_NORMAL))
 264:../Dave/Generated/src/CLK001/CLK001.c ****   uint32_t VCO; 
 265:../Dave/Generated/src/CLK001/CLK001.c ****   uint32_t stepping_K2DIV;	
 266:../Dave/Generated/src/CLK001/CLK001.c **** #endif
 267:../Dave/Generated/src/CLK001/CLK001.c **** #if (((CLK001_CLOCK_SYS_SRC == CLK001_CLOCK_SRC_PLL) && \
 268:../Dave/Generated/src/CLK001/CLK001.c ****     (CLK001_CLOCK_PLL_MODE == CLK001_CLOCK_PLL_PRESCALER) && \
 269:../Dave/Generated/src/CLK001/CLK001.c ****     (CLK001_PLL_CLOCK_INPUT != CLK001_CLOCK_BACK_UP_CLOCK))|| \
 270:../Dave/Generated/src/CLK001/CLK001.c ****     ((CLK001_CLOCK_SYS_SRC == CLK001_CLOCK_SRC_PLL) && \
 271:../Dave/Generated/src/CLK001/CLK001.c ****     (CLK001_CLOCK_PLL_MODE == CLK001_CLOCK_PLL_NORMAL)))
 272:../Dave/Generated/src/CLK001/CLK001.c ****   uint32_t timeout_count;
 273:../Dave/Generated/src/CLK001/CLK001.c **** #endif
 274:../Dave/Generated/src/CLK001/CLK001.c ****   /*Back up clock trimming*/
 275:../Dave/Generated/src/CLK001/CLK001.c **** #if ((CLK001_TRIM_OPTION == CLK001_CLOCK_TRIM_AUTOMATIC)&& \
 276:../Dave/Generated/src/CLK001/CLK001.c ****     (CLK001_STANDBY_CLOCK == CLK001_HIB_CLOCK_FOSI))
 277:../Dave/Generated/src/CLK001/CLK001.c ****   {
 278:../Dave/Generated/src/CLK001/CLK001.c ****   
 279:../Dave/Generated/src/CLK001/CLK001.c ****      /* check if HIB Domain enabled  */
 280:../Dave/Generated/src/CLK001/CLK001.c ****      if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0U)
 177              		.loc 1 280 0
 178 000c 4FF48443 		mov	r3, #16896
 179 0010 C5F20003 		movt	r3, 20480
 180 0014 1B68     		ldr	r3, [r3, #0]
 181 0016 03F00103 		and	r3, r3, #1
 182 001a 002B     		cmp	r3, #0
 183 001c 0BD1     		bne	.L8
 281:../Dave/Generated/src/CLK001/CLK001.c ****      {
 282:../Dave/Generated/src/CLK001/CLK001.c ****        SCU_POWER->PWRSET |= (uint32_t)SCU_POWER_PWRSET_HIB_Msk;/*enable Hibernate domain*/
 184              		.loc 1 282 0
 185 001e 4FF48443 		mov	r3, #16896
 186 0022 C5F20003 		movt	r3, 20480
 187 0026 4FF48442 		mov	r2, #16896
 188 002a C5F20002 		movt	r2, 20480
 189 002e 5268     		ldr	r2, [r2, #4]
 190 0030 42F00102 		orr	r2, r2, #1
 191 0034 5A60     		str	r2, [r3, #4]
 192              	.L8:
 283:../Dave/Generated/src/CLK001/CLK001.c ****      }
 284:../Dave/Generated/src/CLK001/CLK001.c **** 
 285:../Dave/Generated/src/CLK001/CLK001.c ****      /* check if HIB Domain is not in reset state  */
 286:../Dave/Generated/src/CLK001/CLK001.c ****      if ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0U)
 193              		.loc 1 286 0
 194 0036 4FF48843 		mov	r3, #17408
 195 003a C5F20003 		movt	r3, 20480
 196 003e 1B68     		ldr	r3, [r3, #0]
 197 0040 03F40073 		and	r3, r3, #512
 198 0044 002B     		cmp	r3, #0
 199 0046 0BD0     		beq	.L9
 287:../Dave/Generated/src/CLK001/CLK001.c ****      {
 288:../Dave/Generated/src/CLK001/CLK001.c **** 	     /*de-assert hibernate reset*/
 289:../Dave/Generated/src/CLK001/CLK001.c ****        SCU_RESET->RSTCLR |= (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 200              		.loc 1 289 0
 201 0048 4FF48843 		mov	r3, #17408
 202 004c C5F20003 		movt	r3, 20480
 203 0050 4FF48842 		mov	r2, #17408
 204 0054 C5F20002 		movt	r2, 20480
 205 0058 9268     		ldr	r2, [r2, #8]
 206 005a 42F40072 		orr	r2, r2, #512
 207 005e 9A60     		str	r2, [r3, #8]
 208              	.L9:
 290:../Dave/Generated/src/CLK001/CLK001.c ****      }
 291:../Dave/Generated/src/CLK001/CLK001.c ****      SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 209              		.loc 1 291 0
 210 0060 44F21073 		movw	r3, #18192
 211 0064 C5F20003 		movt	r3, 20480
 212 0068 44F21072 		movw	r2, #18192
 213 006c C5F20002 		movt	r2, 20480
 214 0070 5268     		ldr	r2, [r2, #4]
 215 0072 22F48012 		bic	r2, r2, #1048576
 216 0076 5A60     		str	r2, [r3, #4]
 292:../Dave/Generated/src/CLK001/CLK001.c ****      /*insert some delay */
 293:../Dave/Generated/src/CLK001/CLK001.c ****      Delay(CLK001_DELAY_CNT_50US_50MHZ); /*~50us @ maximum back up clock freq*/
 217              		.loc 1 293 0
 218 0078 4FF06400 		mov	r0, #100
 219 007c FFF7FEFF 		bl	Delay
 294:../Dave/Generated/src/CLK001/CLK001.c ****      SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 220              		.loc 1 294 0
 221 0080 44F21073 		movw	r3, #18192
 222 0084 C5F20003 		movt	r3, 20480
 223 0088 44F21072 		movw	r2, #18192
 224 008c C5F20002 		movt	r2, 20480
 225 0090 5268     		ldr	r2, [r2, #4]
 226 0092 42F40022 		orr	r2, r2, #524288
 227 0096 5A60     		str	r2, [r3, #4]
 295:../Dave/Generated/src/CLK001/CLK001.c ****   }
 296:../Dave/Generated/src/CLK001/CLK001.c **** #elif((CLK001_TRIM_OPTION == CLK001_CLOCK_TRIM_AUTOMATIC)&& \
 297:../Dave/Generated/src/CLK001/CLK001.c ****      (CLK001_STANDBY_CLOCK == CLK001_HIB_CLOCK_OSCULP))
 298:../Dave/Generated/src/CLK001/CLK001.c ****   {
 299:../Dave/Generated/src/CLK001/CLK001.c ****     /* check for HIB Domain enabled  */
 300:../Dave/Generated/src/CLK001/CLK001.c ****     if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0U)
 301:../Dave/Generated/src/CLK001/CLK001.c ****     {
 302:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_POWER->PWRSET |= (uint32_t)SCU_POWER_PWRSET_HIB_Msk;/*enable Hibernate domain*/
 303:../Dave/Generated/src/CLK001/CLK001.c ****     }
 304:../Dave/Generated/src/CLK001/CLK001.c **** 
 305:../Dave/Generated/src/CLK001/CLK001.c ****     /* check for HIB Domain is not in reset state  */
 306:../Dave/Generated/src/CLK001/CLK001.c ****     if ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0U)
 307:../Dave/Generated/src/CLK001/CLK001.c ****     {
 308:../Dave/Generated/src/CLK001/CLK001.c ****       /*de-assert hibernate reset*/
 309:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_RESET->RSTCLR |= (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 310:../Dave/Generated/src/CLK001/CLK001.c ****     }
 311:../Dave/Generated/src/CLK001/CLK001.c ****     /*check OSCUL if running correct*/
 312:../Dave/Generated/src/CLK001/CLK001.c ****     if ((SCU_HIBERNATE->OSCULCTRL & SCU_HIBERNATE_OSCULCTRL_MODE_Msk) != 0U)
 313:../Dave/Generated/src/CLK001/CLK001.c ****     {
 314:../Dave/Generated/src/CLK001/CLK001.c ****       OSCULP_init();
 315:../Dave/Generated/src/CLK001/CLK001.c **** 	  /* select OSCUL clock for RTC*/
 316:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_RCS_Msk;
 317:../Dave/Generated/src/CLK001/CLK001.c ****       while (SCU_GENERAL->MIRRSTS & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 318:../Dave/Generated/src/CLK001/CLK001.c ****       {}
 319:../Dave/Generated/src/CLK001/CLK001.c **** 
 320:../Dave/Generated/src/CLK001/CLK001.c ****       while((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_HDCR_Msk)!=\
 321:../Dave/Generated/src/CLK001/CLK001.c **** 	       SCU_INTERRUPT_SRRAW_HDCR_Msk)
 322:../Dave/Generated/src/CLK001/CLK001.c ****       {}
 323:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_INTERRUPT->SRCLR |= (uint32_t)SCU_INTERRUPT_SRCLR_HDCR_Msk;
 324:../Dave/Generated/src/CLK001/CLK001.c ****     }              
 325:../Dave/Generated/src/CLK001/CLK001.c ****       
 326:../Dave/Generated/src/CLK001/CLK001.c ****     /* now OSCULP is running and can be used*/
 327:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_HIBERNATE->HDCR  |= (uint32_t)SCU_HIBERNATE_HDCR_STDBYSEL_Msk;
 328:../Dave/Generated/src/CLK001/CLK001.c ****     while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk)!= \
 329:../Dave/Generated/src/CLK001/CLK001.c **** 	       SCU_POWER_PWRSTAT_HIBEN_Msk)
 330:../Dave/Generated/src/CLK001/CLK001.c ****     {}
 331:../Dave/Generated/src/CLK001/CLK001.c **** 
 332:../Dave/Generated/src/CLK001/CLK001.c ****     while((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_HDCR_Msk)!= \
 333:../Dave/Generated/src/CLK001/CLK001.c **** 	       SCU_INTERRUPT_SRRAW_HDCR_Msk)
 334:../Dave/Generated/src/CLK001/CLK001.c ****     {}
 335:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_INTERRUPT->SRCLR |= (uint32_t)SCU_INTERRUPT_SRCLR_HDCR_Msk;
 336:../Dave/Generated/src/CLK001/CLK001.c **** 	
 337:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 338:../Dave/Generated/src/CLK001/CLK001.c ****     
 339:../Dave/Generated/src/CLK001/CLK001.c ****     /*insert some delay */
 340:../Dave/Generated/src/CLK001/CLK001.c ****     Delay(CLK001_DELAY_CNT_50US_50MHZ);/*~50us @ maximum back up clock freq*/
 341:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 342:../Dave/Generated/src/CLK001/CLK001.c **** 
 343:../Dave/Generated/src/CLK001/CLK001.c ****   }
 344:../Dave/Generated/src/CLK001/CLK001.c **** #else /*trimming option is factory trimming*/
 345:../Dave/Generated/src/CLK001/CLK001.c ****   {
 346:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 347:../Dave/Generated/src/CLK001/CLK001.c ****   }
 348:../Dave/Generated/src/CLK001/CLK001.c **** #endif /*end of trimming options*/
 349:../Dave/Generated/src/CLK001/CLK001.c ****   /*insert some delay after trimming is enabled*/
 350:../Dave/Generated/src/CLK001/CLK001.c ****   Delay(CLK001_DELAY_CNT_50US_50MHZ);/*~50us @ maximum back up clock freq*/
 228              		.loc 1 350 0
 229 0098 4FF06400 		mov	r0, #100
 230 009c FFF7FEFF 		bl	Delay
 351:../Dave/Generated/src/CLK001/CLK001.c **** 
 352:../Dave/Generated/src/CLK001/CLK001.c ****   /*Select system clock = back up clock (is the default configuration anyway)*/
 353:../Dave/Generated/src/CLK001/CLK001.c **** #if (CLK001_CLOCK_SYS_SRC == CLK001_CLOCK_SRC_BACKUP)
 354:../Dave/Generated/src/CLK001/CLK001.c ****   {
 355:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_CLK->SYSCLKCR &= (uint32_t)~(SCU_CLK_SYSCLKCR_SYSSEL_Msk);
 356:../Dave/Generated/src/CLK001/CLK001.c ****   }
 357:../Dave/Generated/src/CLK001/CLK001.c ****   /*system clock = pll */
 358:../Dave/Generated/src/CLK001/CLK001.c **** #else/*(CLK001_CLOCK_SYS_SRC == CLK001_CLOCK_SRC_PLL)*/
 359:../Dave/Generated/src/CLK001/CLK001.c ****   {
 360:../Dave/Generated/src/CLK001/CLK001.c ****     /* enable PLL first */
 361:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 231              		.loc 1 361 0
 232 00a0 44F21073 		movw	r3, #18192
 233 00a4 C5F20003 		movt	r3, 20480
 234 00a8 44F21072 		movw	r2, #18192
 235 00ac C5F20002 		movt	r2, 20480
 236 00b0 5268     		ldr	r2, [r2, #4]
 237 00b2 22F48032 		bic	r2, r2, #65536
 238 00b6 22F00202 		bic	r2, r2, #2
 239 00ba 5A60     		str	r2, [r3, #4]
 362:../Dave/Generated/src/CLK001/CLK001.c **** 
 363:../Dave/Generated/src/CLK001/CLK001.c ****     /*if crystal or external digital input for PLL input*/
 364:../Dave/Generated/src/CLK001/CLK001.c **** #if ((CLK001_PLL_CLOCK_INPUT == CLK001_CLOCK_CRYSTAL)||\
 365:../Dave/Generated/src/CLK001/CLK001.c ****     (CLK001_PLL_CLOCK_INPUT == CLK001_CLOCK_EXT_CLOCK))
 366:../Dave/Generated/src/CLK001/CLK001.c ****     {
 367:../Dave/Generated/src/CLK001/CLK001.c ****       /************************************************************************/
 368:../Dave/Generated/src/CLK001/CLK001.c ****       /*    Use external crystal or digital input for PLL clock input         */
 369:../Dave/Generated/src/CLK001/CLK001.c ****       /************************************************************************/ 
 370:../Dave/Generated/src/CLK001/CLK001.c **** 
 371:../Dave/Generated/src/CLK001/CLK001.c ****       /* Enable OSC_HP if not already on */
 372:../Dave/Generated/src/CLK001/CLK001.c ****       if ((SCU_OSC->OSCHPCTRL & SCU_OSC_OSCHPCTRL_MODE_Msk) != \
 240              		.loc 1 372 0
 241 00bc 4FF48E43 		mov	r3, #18176
 242 00c0 C5F20003 		movt	r3, 20480
 243 00c4 5B68     		ldr	r3, [r3, #4]
 244 00c6 03F03003 		and	r3, r3, #48
 245 00ca 002B     		cmp	r3, #0
 246 00cc 54D0     		beq	.L10
 373:../Dave/Generated/src/CLK001/CLK001.c ****          ((uint32_t)CLK001_OSC_HP_MODE << SCU_OSC_OSCHPCTRL_MODE_Pos))
 374:../Dave/Generated/src/CLK001/CLK001.c ****       {
 375:../Dave/Generated/src/CLK001/CLK001.c ****         /*The OSC HP mode is guaranteed to  be = 11b at this point
 376:../Dave/Generated/src/CLK001/CLK001.c ****         * so we can just clear the bit(s) as per the selected mode
 377:../Dave/Generated/src/CLK001/CLK001.c ****         */
 378:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_OSC->OSCHPCTRL &= (((uint32_t)(~(uint32_t)SCU_OSC_OSCHPCTRL_MODE_Msk)) | \
 247              		.loc 1 378 0
 248 00ce 4FF48E43 		mov	r3, #18176
 249 00d2 C5F20003 		movt	r3, 20480
 250 00d6 4FF48E42 		mov	r2, #18176
 251 00da C5F20002 		movt	r2, 20480
 252 00de 5268     		ldr	r2, [r2, #4]
 253 00e0 22F03002 		bic	r2, r2, #48
 254 00e4 5A60     		str	r2, [r3, #4]
 379:../Dave/Generated/src/CLK001/CLK001.c ****            ((uint32_t)CLK001_OSC_HP_MODE << SCU_OSC_OSCHPCTRL_MODE_Pos));
 380:../Dave/Generated/src/CLK001/CLK001.c **** 
 381:../Dave/Generated/src/CLK001/CLK001.c ****         /* setup OSC WDG divider - at this point the bitfield would be 0
 382:../Dave/Generated/src/CLK001/CLK001.c ****         hence we can OR with the desired value*/
 383:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_OSC->OSCHPCTRL |=
 255              		.loc 1 383 0
 256 00e6 4FF48E43 		mov	r3, #18176
 257 00ea C5F20003 		movt	r3, 20480
 258 00ee 4FF48E42 		mov	r2, #18176
 259 00f2 C5F20002 		movt	r2, 20480
 260 00f6 5268     		ldr	r2, [r2, #4]
 261 00f8 42F44032 		orr	r2, r2, #196608
 262 00fc 5A60     		str	r2, [r3, #4]
 384:../Dave/Generated/src/CLK001/CLK001.c ****           ((uint32_t)((CLK001_CLOCK_CRYSTAL_FREQUENCY/CLK001_SOSCWDG_FREF)-1)\
 385:../Dave/Generated/src/CLK001/CLK001.c ****                                               <<SCU_OSC_OSCHPCTRL_OSCVAL_Pos);
 386:../Dave/Generated/src/CLK001/CLK001.c ****         /* select external OSC as PLL input */
 387:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON2 &= (uint32_t)~SCU_PLL_PLLCON2_PINSEL_Msk;
 263              		.loc 1 387 0
 264 00fe 44F21073 		movw	r3, #18192
 265 0102 C5F20003 		movt	r3, 20480
 266 0106 44F21072 		movw	r2, #18192
 267 010a C5F20002 		movt	r2, 20480
 268 010e D268     		ldr	r2, [r2, #12]
 269 0110 22F00102 		bic	r2, r2, #1
 270 0114 DA60     		str	r2, [r3, #12]
 388:../Dave/Generated/src/CLK001/CLK001.c ****         /* restart OSC Watchdog */
 389:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 271              		.loc 1 389 0
 272 0116 44F21073 		movw	r3, #18192
 273 011a C5F20003 		movt	r3, 20480
 274 011e 44F21072 		movw	r2, #18192
 275 0122 C5F20002 		movt	r2, 20480
 276 0126 5268     		ldr	r2, [r2, #4]
 277 0128 22F40032 		bic	r2, r2, #131072
 278 012c 5A60     		str	r2, [r3, #4]
 390:../Dave/Generated/src/CLK001/CLK001.c **** 
 391:../Dave/Generated/src/CLK001/CLK001.c ****         /*approx loop count for 150ms @ max untrimmed Backup clock freq*/
 392:../Dave/Generated/src/CLK001/CLK001.c ****         timeout_count = CLK001_LOOP_CNT_150MS; 
 279              		.loc 1 392 0
 280 012e 44F25063 		movw	r3, #18000
 281 0132 7B60     		str	r3, [r7, #4]
 282              	.L12:
 393:../Dave/Generated/src/CLK001/CLK001.c ****         do 
 394:../Dave/Generated/src/CLK001/CLK001.c ****         {
 395:../Dave/Generated/src/CLK001/CLK001.c ****           /* time out after ~150ms  */
 396:../Dave/Generated/src/CLK001/CLK001.c ****           Delay(CLK001_DELAY_CNT_8US_50MHZ);  
 283              		.loc 1 396 0
 284 0134 4FF00A00 		mov	r0, #10
 285 0138 FFF7FEFF 		bl	Delay
 397:../Dave/Generated/src/CLK001/CLK001.c ****           timeout_count--;
 286              		.loc 1 397 0
 287 013c 7B68     		ldr	r3, [r7, #4]
 288 013e 03F1FF33 		add	r3, r3, #-1
 289 0142 7B60     		str	r3, [r7, #4]
 398:../Dave/Generated/src/CLK001/CLK001.c **** 
 399:../Dave/Generated/src/CLK001/CLK001.c ****         }while((((SCU_PLL->PLLSTAT) & CLK001_PLLSTAT_OSC_USABLE_MASK) != \
 290              		.loc 1 399 0
 291 0144 44F21073 		movw	r3, #18192
 292 0148 C5F20003 		movt	r3, 20480
 293 014c 1B68     		ldr	r3, [r3, #0]
 294 014e 03F46073 		and	r3, r3, #896
 295 0152 B3F5607F 		cmp	r3, #896
 296 0156 02D0     		beq	.L11
 400:../Dave/Generated/src/CLK001/CLK001.c ****               CLK001_PLLSTAT_OSC_USABLE_MASK) && (timeout_count !=0U));
 297              		.loc 1 400 0
 298 0158 7B68     		ldr	r3, [r7, #4]
 299 015a 002B     		cmp	r3, #0
 300 015c EAD1     		bne	.L12
 301              	.L11:
 401:../Dave/Generated/src/CLK001/CLK001.c **** 
 402:../Dave/Generated/src/CLK001/CLK001.c ****         if (((SCU_PLL->PLLSTAT) & CLK001_PLLSTAT_OSC_USABLE_MASK) != \
 302              		.loc 1 402 0
 303 015e 44F21073 		movw	r3, #18192
 304 0162 C5F20003 		movt	r3, 20480
 305 0166 1B68     		ldr	r3, [r3, #0]
 306 0168 03F46073 		and	r3, r3, #896
 307 016c B3F5607F 		cmp	r3, #896
 308 0170 02D0     		beq	.L10
 403:../Dave/Generated/src/CLK001/CLK001.c ****               CLK001_PLLSTAT_OSC_USABLE_MASK)
 404:../Dave/Generated/src/CLK001/CLK001.c ****         {
 405:../Dave/Generated/src/CLK001/CLK001.c ****            /* Return Error */
 406:../Dave/Generated/src/CLK001/CLK001.c ****         	Return_status = 0U;
 309              		.loc 1 406 0
 310 0172 4FF00003 		mov	r3, #0
 311 0176 FB60     		str	r3, [r7, #12]
 312              	.L10:
 407:../Dave/Generated/src/CLK001/CLK001.c ****         }
 408:../Dave/Generated/src/CLK001/CLK001.c ****       }
 409:../Dave/Generated/src/CLK001/CLK001.c ****     }
 410:../Dave/Generated/src/CLK001/CLK001.c **** #else /*PLL clock source is back up clock */
 411:../Dave/Generated/src/CLK001/CLK001.c ****     {
 412:../Dave/Generated/src/CLK001/CLK001.c ****       /*select Backup Clock as input to PLL*/
 413:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_PLL->PLLCON2 |= (uint32_t)SCU_PLL_PLLCON2_PINSEL_Msk;
 414:../Dave/Generated/src/CLK001/CLK001.c ****     }
 415:../Dave/Generated/src/CLK001/CLK001.c **** #endif /*end of PLL clock source check */
 416:../Dave/Generated/src/CLK001/CLK001.c ****     /**************************************************************************/
 417:../Dave/Generated/src/CLK001/CLK001.c ****     /*   Setup and lock the main PLL (PLL is in normal mode)                  */
 418:../Dave/Generated/src/CLK001/CLK001.c ****     /**************************************************************************/
 419:../Dave/Generated/src/CLK001/CLK001.c **** #if ((CLK001_CLOCK_SYS_SRC == CLK001_CLOCK_SRC_PLL) && \
 420:../Dave/Generated/src/CLK001/CLK001.c ****     (CLK001_CLOCK_PLL_MODE == CLK001_CLOCK_PLL_NORMAL))
 421:../Dave/Generated/src/CLK001/CLK001.c ****     {
 422:../Dave/Generated/src/CLK001/CLK001.c ****       if ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)!= \
 313              		.loc 1 422 0
 314 0178 44F21073 		movw	r3, #18192
 315 017c C5F20003 		movt	r3, 20480
 316 0180 1B68     		ldr	r3, [r3, #0]
 317 0182 03F00403 		and	r3, r3, #4
 318 0186 002B     		cmp	r3, #0
 319 0188 40F08780 		bne	.L13
 423:../Dave/Generated/src/CLK001/CLK001.c **** 	       SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 424:../Dave/Generated/src/CLK001/CLK001.c ****       {
 425:../Dave/Generated/src/CLK001/CLK001.c ****         /* System is still running from Backup clock */ 
 426:../Dave/Generated/src/CLK001/CLK001.c ****        
 427:../Dave/Generated/src/CLK001/CLK001.c ****         /*Calculation for stepping*/
 428:../Dave/Generated/src/CLK001/CLK001.c **** #if((CLK001_PLL_CLOCK_INPUT == CLK001_CLOCK_CRYSTAL)||\
 429:../Dave/Generated/src/CLK001/CLK001.c ****    (CLK001_PLL_CLOCK_INPUT == CLK001_CLOCK_EXT_CLOCK))
 430:../Dave/Generated/src/CLK001/CLK001.c ****         {
 431:../Dave/Generated/src/CLK001/CLK001.c ****           VCO = (CLK001_CLOCK_CRYSTAL_FREQUENCY/ \
 320              		.loc 1 431 0
 321 018c 4FF46053 		mov	r3, #14336
 322 0190 C1F69C43 		movt	r3, 7324
 323 0194 BB60     		str	r3, [r7, #8]
 432:../Dave/Generated/src/CLK001/CLK001.c ****                 (CLK001_PLL_PDIV+1))*(CLK001_PLL_NDIV+1);
 433:../Dave/Generated/src/CLK001/CLK001.c ****         }
 434:../Dave/Generated/src/CLK001/CLK001.c **** #else /*PLL clcok source is back up clock in normal mode*/
 435:../Dave/Generated/src/CLK001/CLK001.c ****         {
 436:../Dave/Generated/src/CLK001/CLK001.c ****           VCO = (CLK001_CLOCK_BACK_UP/(CLK001_PLL_PDIV+1U))*(CLK001_PLL_NDIV+1U);
 437:../Dave/Generated/src/CLK001/CLK001.c ****         }
 438:../Dave/Generated/src/CLK001/CLK001.c **** #endif /*End of PLL clock source check in normal mode*/
 439:../Dave/Generated/src/CLK001/CLK001.c ****         stepping_K2DIV = (VCO/CLK001_PLL_FREQ_STEP1)-1U;
 324              		.loc 1 439 0
 325 0196 BA68     		ldr	r2, [r7, #8]
 326 0198 49F68173 		movw	r3, #40833
 327 019c C1F25E63 		movt	r3, 5726
 328 01a0 A3FB0213 		umull	r1, r3, r3, r2
 329 01a4 4FEA5353 		lsr	r3, r3, #21
 330 01a8 03F1FF33 		add	r3, r3, #-1
 331 01ac 3B60     		str	r3, [r7, #0]
 440:../Dave/Generated/src/CLK001/CLK001.c ****            
 441:../Dave/Generated/src/CLK001/CLK001.c ****         /* Go to bypass the Main PLL */
 442:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 332              		.loc 1 442 0
 333 01ae 44F21073 		movw	r3, #18192
 334 01b2 C5F20003 		movt	r3, 20480
 335 01b6 44F21072 		movw	r2, #18192
 336 01ba C5F20002 		movt	r2, 20480
 337 01be 5268     		ldr	r2, [r2, #4]
 338 01c0 42F00102 		orr	r2, r2, #1
 339 01c4 5A60     		str	r2, [r3, #4]
 443:../Dave/Generated/src/CLK001/CLK001.c ****         /* disconnect Oscillator from PLL */
 444:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 340              		.loc 1 444 0
 341 01c6 44F21073 		movw	r3, #18192
 342 01ca C5F20003 		movt	r3, 20480
 343 01ce 44F21072 		movw	r2, #18192
 344 01d2 C5F20002 		movt	r2, 20480
 345 01d6 5268     		ldr	r2, [r2, #4]
 346 01d8 42F01002 		orr	r2, r2, #16
 347 01dc 5A60     		str	r2, [r3, #4]
 445:../Dave/Generated/src/CLK001/CLK001.c ****         /* Setup divider settings for main PLL */
 446:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON1 =(((uint32_t)CLK001_PLL_K1DIV) | \
 348              		.loc 1 446 0
 349 01de 44F21073 		movw	r3, #18192
 350 01e2 C5F20003 		movt	r3, 20480
 447:../Dave/Generated/src/CLK001/CLK001.c ****                ((uint32_t)CLK001_PLL_NDIV<<SCU_PLL_PLLCON1_NDIV_Pos) | \
 448:../Dave/Generated/src/CLK001/CLK001.c ****                ((uint32_t)stepping_K2DIV<<SCU_PLL_PLLCON1_K2DIV_Pos) | \
 351              		.loc 1 448 0
 352 01e6 3A68     		ldr	r2, [r7, #0]
 353 01e8 4FEA0242 		lsl	r2, r2, #16
 354 01ec 42F41C52 		orr	r2, r2, #9984
 446:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON1 =(((uint32_t)CLK001_PLL_K1DIV) | \
 355              		.loc 1 446 0
 356 01f0 9A60     		str	r2, [r3, #8]
 449:../Dave/Generated/src/CLK001/CLK001.c ****                ((uint32_t)CLK001_PLL_PDIV<<SCU_PLL_PLLCON1_PDIV_Pos));
 450:../Dave/Generated/src/CLK001/CLK001.c ****         /* Set OSCDISCDIS */
 451:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 357              		.loc 1 451 0
 358 01f2 44F21073 		movw	r3, #18192
 359 01f6 C5F20003 		movt	r3, 20480
 360 01fa 44F21072 		movw	r2, #18192
 361 01fe C5F20002 		movt	r2, 20480
 362 0202 5268     		ldr	r2, [r2, #4]
 363 0204 42F04002 		orr	r2, r2, #64
 364 0208 5A60     		str	r2, [r3, #4]
 452:../Dave/Generated/src/CLK001/CLK001.c ****         /* connect Oscillator to PLL */
 453:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 365              		.loc 1 453 0
 366 020a 44F21073 		movw	r3, #18192
 367 020e C5F20003 		movt	r3, 20480
 368 0212 44F21072 		movw	r2, #18192
 369 0216 C5F20002 		movt	r2, 20480
 370 021a 5268     		ldr	r2, [r2, #4]
 371 021c 22F01002 		bic	r2, r2, #16
 372 0220 5A60     		str	r2, [r3, #4]
 454:../Dave/Generated/src/CLK001/CLK001.c ****         /* restart PLL Lock detection */
 455:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 373              		.loc 1 455 0
 374 0222 44F21073 		movw	r3, #18192
 375 0226 C5F20003 		movt	r3, 20480
 376 022a 44F21072 		movw	r2, #18192
 377 022e C5F20002 		movt	r2, 20480
 378 0232 5268     		ldr	r2, [r2, #4]
 379 0234 42F48022 		orr	r2, r2, #262144
 380 0238 5A60     		str	r2, [r3, #4]
 456:../Dave/Generated/src/CLK001/CLK001.c ****         /* wait for PLL Lock */
 457:../Dave/Generated/src/CLK001/CLK001.c **** 
 458:../Dave/Generated/src/CLK001/CLK001.c ****         /* Timeout for wait loop ~150ms */
 459:../Dave/Generated/src/CLK001/CLK001.c ****         /*approx loop count for 150ms @ Backup Clock freq*/
 460:../Dave/Generated/src/CLK001/CLK001.c ****         timeout_count = CLK001_LOOP_CNT_150MS;
 381              		.loc 1 460 0
 382 023a 44F25063 		movw	r3, #18000
 383 023e 7B60     		str	r3, [r7, #4]
 384              	.L15:
 461:../Dave/Generated/src/CLK001/CLK001.c ****         do
 462:../Dave/Generated/src/CLK001/CLK001.c ****         {
 463:../Dave/Generated/src/CLK001/CLK001.c ****           Delay(CLK001_DELAY_CNT_8US_50MHZ);  /*~8us Delay*/
 385              		.loc 1 463 0
 386 0240 4FF00A00 		mov	r0, #10
 387 0244 FFF7FEFF 		bl	Delay
 464:../Dave/Generated/src/CLK001/CLK001.c ****           timeout_count--;
 388              		.loc 1 464 0
 389 0248 7B68     		ldr	r3, [r7, #4]
 390 024a 03F1FF33 		add	r3, r3, #-1
 391 024e 7B60     		str	r3, [r7, #4]
 465:../Dave/Generated/src/CLK001/CLK001.c ****         } while (((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)!= \
 392              		.loc 1 465 0
 393 0250 44F21073 		movw	r3, #18192
 394 0254 C5F20003 		movt	r3, 20480
 395 0258 1B68     		ldr	r3, [r3, #0]
 396 025a 03F00403 		and	r3, r3, #4
 397 025e 002B     		cmp	r3, #0
 398 0260 02D1     		bne	.L14
 466:../Dave/Generated/src/CLK001/CLK001.c **** 		           SCU_PLL_PLLSTAT_VCOLOCK_Msk)&& (timeout_count !=0U));
 399              		.loc 1 466 0
 400 0262 7B68     		ldr	r3, [r7, #4]
 401 0264 002B     		cmp	r3, #0
 402 0266 EBD1     		bne	.L15
 403              	.L14:
 467:../Dave/Generated/src/CLK001/CLK001.c **** 
 468:../Dave/Generated/src/CLK001/CLK001.c ****         if ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)== \
 404              		.loc 1 468 0
 405 0268 44F21073 		movw	r3, #18192
 406 026c C5F20003 		movt	r3, 20480
 407 0270 1B68     		ldr	r3, [r3, #0]
 408 0272 03F00403 		and	r3, r3, #4
 409 0276 002B     		cmp	r3, #0
 410 0278 0CD0     		beq	.L16
 469:../Dave/Generated/src/CLK001/CLK001.c ****             SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 470:../Dave/Generated/src/CLK001/CLK001.c ****         {
 471:../Dave/Generated/src/CLK001/CLK001.c ****           /* Disable bypass- put pll clock back */
 472:../Dave/Generated/src/CLK001/CLK001.c ****           SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 411              		.loc 1 472 0
 412 027a 44F21073 		movw	r3, #18192
 413 027e C5F20003 		movt	r3, 20480
 414 0282 44F21072 		movw	r2, #18192
 415 0286 C5F20002 		movt	r2, 20480
 416 028a 5268     		ldr	r2, [r2, #4]
 417 028c 22F00102 		bic	r2, r2, #1
 418 0290 5A60     		str	r2, [r3, #4]
 419 0292 02E0     		b	.L13
 420              	.L16:
 473:../Dave/Generated/src/CLK001/CLK001.c ****         }
 474:../Dave/Generated/src/CLK001/CLK001.c ****         else
 475:../Dave/Generated/src/CLK001/CLK001.c ****         {
 476:../Dave/Generated/src/CLK001/CLK001.c ****           
 477:../Dave/Generated/src/CLK001/CLK001.c ****         	Return_status =0U;
 421              		.loc 1 477 0
 422 0294 4FF00003 		mov	r3, #0
 423 0298 FB60     		str	r3, [r7, #12]
 424              	.L13:
 478:../Dave/Generated/src/CLK001/CLK001.c ****         }
 479:../Dave/Generated/src/CLK001/CLK001.c ****       }
 480:../Dave/Generated/src/CLK001/CLK001.c **** 
 481:../Dave/Generated/src/CLK001/CLK001.c ****     }
 482:../Dave/Generated/src/CLK001/CLK001.c **** #endif /*end of setting PLL is in Normal mode - first frequency stepping*/
 483:../Dave/Generated/src/CLK001/CLK001.c ****     /**************************************************************************/
 484:../Dave/Generated/src/CLK001/CLK001.c ****     /*   Setup main PLL (PLL is in prescaler mode)                            */
 485:../Dave/Generated/src/CLK001/CLK001.c ****     /**************************************************************************/
 486:../Dave/Generated/src/CLK001/CLK001.c **** #if ((CLK001_CLOCK_SYS_SRC == CLK001_CLOCK_SRC_PLL) && \
 487:../Dave/Generated/src/CLK001/CLK001.c ****     (CLK001_CLOCK_PLL_MODE == CLK001_CLOCK_PLL_PRESCALER))
 488:../Dave/Generated/src/CLK001/CLK001.c ****     {
 489:../Dave/Generated/src/CLK001/CLK001.c ****       /* Program PLL for Prescaler mode*/
 490:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_PLL->PLLCON0 |= \
 491:../Dave/Generated/src/CLK001/CLK001.c ****              (SCU_PLL_PLLCON0_VCOBYP_Msk|SCU_PLL_PLLCON0_VCOPWD_Msk);
 492:../Dave/Generated/src/CLK001/CLK001.c ****               
 493:../Dave/Generated/src/CLK001/CLK001.c ****       /* wait for Prescaler mode to be entered*/
 494:../Dave/Generated/src/CLK001/CLK001.c ****       while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk)!= \
 495:../Dave/Generated/src/CLK001/CLK001.c **** 	          SCU_PLL_PLLSTAT_VCOBYST_Msk)
 496:../Dave/Generated/src/CLK001/CLK001.c ****       {}
 497:../Dave/Generated/src/CLK001/CLK001.c ****        
 498:../Dave/Generated/src/CLK001/CLK001.c ****       /* Choose fOSC as an input to K1divider*/
 499:../Dave/Generated/src/CLK001/CLK001.c **** #if((CLK001_PLL_CLOCK_INPUT == CLK001_CLOCK_CRYSTAL)||\
 500:../Dave/Generated/src/CLK001/CLK001.c ****    (CLK001_PLL_CLOCK_INPUT == CLK001_CLOCK_EXT_CLOCK))
 501:../Dave/Generated/src/CLK001/CLK001.c ****       {
 502:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON2 &= (uint32_t)~SCU_PLL_PLLCON2_K1INSEL_Msk;
 503:../Dave/Generated/src/CLK001/CLK001.c ****       }
 504:../Dave/Generated/src/CLK001/CLK001.c **** #else /*Input to K1 divider is back up clock*/
 505:../Dave/Generated/src/CLK001/CLK001.c ****       {
 506:../Dave/Generated/src/CLK001/CLK001.c ****         SCU_PLL->PLLCON2 |= (uint32_t)SCU_PLL_PLLCON2_K1INSEL_Msk;
 507:../Dave/Generated/src/CLK001/CLK001.c ****       }
 508:../Dave/Generated/src/CLK001/CLK001.c **** #endif /*end of input selection for K1 dividier*/
 509:../Dave/Generated/src/CLK001/CLK001.c ****       /* Setup K1 divider for main PLL */
 510:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_PLL->PLLCON1 = CLK001_PLL_K1DIV;
 511:../Dave/Generated/src/CLK001/CLK001.c ****     }
 512:../Dave/Generated/src/CLK001/CLK001.c **** #endif /*end of Prescaler mode settings*/
 513:../Dave/Generated/src/CLK001/CLK001.c **** 	    /* Switch system clock to PLL */
 514:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_CLK->SYSCLKCR |=  (uint32_t)1 << SCU_CLK_SYSCLKCR_SYSSEL_Pos;
 425              		.loc 1 514 0
 426 029a 4FF48C43 		mov	r3, #17920
 427 029e C5F20003 		movt	r3, 20480
 428 02a2 4FF48C42 		mov	r2, #17920
 429 02a6 C5F20002 		movt	r2, 20480
 430 02aa D268     		ldr	r2, [r2, #12]
 431 02ac 42F48032 		orr	r2, r2, #65536
 432 02b0 DA60     		str	r2, [r3, #12]
 515:../Dave/Generated/src/CLK001/CLK001.c ****   }/*end of PLL configuration if PLL is the system clock
 516:../Dave/Generated/src/CLK001/CLK001.c ****     (but it is pending frequency stepping to the target frequency)*/
 517:../Dave/Generated/src/CLK001/CLK001.c **** #endif /*end of system clock selection - PLL Vs Back up clock*/
 518:../Dave/Generated/src/CLK001/CLK001.c ****   
 519:../Dave/Generated/src/CLK001/CLK001.c **** 	/*******************************************************************
 520:../Dave/Generated/src/CLK001/CLK001.c **** 	Before scaling to final frequency we need to setup the clock dividers 
 521:../Dave/Generated/src/CLK001/CLK001.c **** 	*******************************************************************/
 522:../Dave/Generated/src/CLK001/CLK001.c **** 	
 523:../Dave/Generated/src/CLK001/CLK001.c **** 	
 524:../Dave/Generated/src/CLK001/CLK001.c **** 	
 525:../Dave/Generated/src/CLK001/CLK001.c **** 	
 526:../Dave/Generated/src/CLK001/CLK001.c **** 	
 527:../Dave/Generated/src/CLK001/CLK001.c **** 
 528:../Dave/Generated/src/CLK001/CLK001.c **** 
 529:../Dave/Generated/src/CLK001/CLK001.c ****   /***************************************************************************/
 530:../Dave/Generated/src/CLK001/CLK001.c ****   /*   Frequency stepping for main PLL (PLL is in normal mode)               */
 531:../Dave/Generated/src/CLK001/CLK001.c ****   /***************************************************************************/
 532:../Dave/Generated/src/CLK001/CLK001.c **** #if ((CLK001_CLOCK_SYS_SRC == CLK001_CLOCK_SRC_PLL) && \
 533:../Dave/Generated/src/CLK001/CLK001.c ****     (CLK001_CLOCK_PLL_MODE == CLK001_CLOCK_PLL_NORMAL))
 534:../Dave/Generated/src/CLK001/CLK001.c ****   {
 535:../Dave/Generated/src/CLK001/CLK001.c **** 
 536:../Dave/Generated/src/CLK001/CLK001.c ****     /* Reset OSCDISCDIS */
 537:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 433              		.loc 1 537 0
 434 02b2 44F21073 		movw	r3, #18192
 435 02b6 C5F20003 		movt	r3, 20480
 436 02ba 44F21072 		movw	r2, #18192
 437 02be C5F20002 		movt	r2, 20480
 438 02c2 5268     		ldr	r2, [r2, #4]
 439 02c4 22F04002 		bic	r2, r2, #64
 440 02c8 5A60     		str	r2, [r3, #4]
 538:../Dave/Generated/src/CLK001/CLK001.c **** 
 539:../Dave/Generated/src/CLK001/CLK001.c **** 
 540:../Dave/Generated/src/CLK001/CLK001.c **** 
 541:../Dave/Generated/src/CLK001/CLK001.c ****     /*********************************************************
 542:../Dave/Generated/src/CLK001/CLK001.c ****     here the ramp up of the system clock to FSys < 60MHz
 543:../Dave/Generated/src/CLK001/CLK001.c ****     *********************************************************/
 544:../Dave/Generated/src/CLK001/CLK001.c **** #if (CLK001_CLOCK_FSYS > CLK001_PLL_FREQ_STEP2)
 545:../Dave/Generated/src/CLK001/CLK001.c ****     {
 546:../Dave/Generated/src/CLK001/CLK001.c ****       /*********************************************************/
 547:../Dave/Generated/src/CLK001/CLK001.c ****       /* Delay for next K2 step ~50?s */
 548:../Dave/Generated/src/CLK001/CLK001.c ****       /*********************************************************/
 549:../Dave/Generated/src/CLK001/CLK001.c ****       Delay(CLK001_DELAY_CNT_50US_50MHZ); /*~50us Backup clock*/
 441              		.loc 1 549 0
 442 02ca 4FF06400 		mov	r0, #100
 443 02ce FFF7FEFF 		bl	Delay
 550:../Dave/Generated/src/CLK001/CLK001.c **** 
 551:../Dave/Generated/src/CLK001/CLK001.c ****       /*calculation for stepping*/
 552:../Dave/Generated/src/CLK001/CLK001.c ****       stepping_K2DIV = (VCO/CLK001_PLL_FREQ_STEP2)-1;	
 444              		.loc 1 552 0
 445 02d2 BB68     		ldr	r3, [r7, #8]
 446 02d4 4FEA1322 		lsr	r2, r3, #8
 447 02d8 45F2C743 		movw	r3, #21703
 448 02dc C0F21E13 		movt	r3, 286
 449 02e0 A3FB0213 		umull	r1, r3, r3, r2
 450 02e4 4FEA9323 		lsr	r3, r3, #10
 451 02e8 03F1FF33 		add	r3, r3, #-1
 452 02ec 3B60     		str	r3, [r7, #0]
 553:../Dave/Generated/src/CLK001/CLK001.c **** 
 554:../Dave/Generated/src/CLK001/CLK001.c ****       /*Setup divider settings for main PLL */
 555:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_PLL->PLLCON1 =(((uint32_t)CLK001_PLL_K1DIV) | \
 453              		.loc 1 555 0
 454 02ee 44F21073 		movw	r3, #18192
 455 02f2 C5F20003 		movt	r3, 20480
 556:../Dave/Generated/src/CLK001/CLK001.c ****                ((uint32_t)CLK001_PLL_NDIV<<SCU_PLL_PLLCON1_NDIV_Pos)|\
 557:../Dave/Generated/src/CLK001/CLK001.c ****                ((uint32_t)stepping_K2DIV<<SCU_PLL_PLLCON1_K2DIV_Pos)|\
 456              		.loc 1 557 0
 457 02f6 3A68     		ldr	r2, [r7, #0]
 458 02f8 4FEA0242 		lsl	r2, r2, #16
 459 02fc 42F41C52 		orr	r2, r2, #9984
 555:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_PLL->PLLCON1 =(((uint32_t)CLK001_PLL_K1DIV) | \
 460              		.loc 1 555 0
 461 0300 9A60     		str	r2, [r3, #8]
 558:../Dave/Generated/src/CLK001/CLK001.c ****                ((uint32_t)CLK001_PLL_PDIV<<SCU_PLL_PLLCON1_PDIV_Pos));
 559:../Dave/Generated/src/CLK001/CLK001.c ****     }
 560:../Dave/Generated/src/CLK001/CLK001.c **** #endif /*end of check - if PLL target frequency is greater than 60 MHz*/
 561:../Dave/Generated/src/CLK001/CLK001.c **** 
 562:../Dave/Generated/src/CLK001/CLK001.c **** 
 563:../Dave/Generated/src/CLK001/CLK001.c ****     /*********************************************************
 564:../Dave/Generated/src/CLK001/CLK001.c ****     here the ramp up of the system clock to FSys < 90MHz
 565:../Dave/Generated/src/CLK001/CLK001.c ****     *********************************************************/
 566:../Dave/Generated/src/CLK001/CLK001.c **** #if (CLK001_CLOCK_FSYS > CLK001_PLL_FREQ_STEP3)
 567:../Dave/Generated/src/CLK001/CLK001.c ****     {
 568:../Dave/Generated/src/CLK001/CLK001.c ****       
 569:../Dave/Generated/src/CLK001/CLK001.c ****       /*********************************************************/
 570:../Dave/Generated/src/CLK001/CLK001.c ****       /* Delay for next K2 step ~50us */
 571:../Dave/Generated/src/CLK001/CLK001.c ****       /*********************************************************/
 572:../Dave/Generated/src/CLK001/CLK001.c ****       Delay(CLK001_DELAY_CNT_50US_50MHZ); /*~50?s @ 60MHz clock*/
 462              		.loc 1 572 0
 463 0302 4FF06400 		mov	r0, #100
 464 0306 FFF7FEFF 		bl	Delay
 573:../Dave/Generated/src/CLK001/CLK001.c ****       
 574:../Dave/Generated/src/CLK001/CLK001.c ****       /*calulation for stepping*/
 575:../Dave/Generated/src/CLK001/CLK001.c ****       stepping_K2DIV = (VCO/CLK001_PLL_FREQ_STEP3)-1;			
 465              		.loc 1 575 0
 466 030a BB68     		ldr	r3, [r7, #8]
 467 030c 4FEAD312 		lsr	r2, r3, #7
 468 0310 4EF22F33 		movw	r3, #58159
 469 0314 C0F2BE03 		movt	r3, 190
 470 0318 A3FB0213 		umull	r1, r3, r3, r2
 471 031c 4FEAD323 		lsr	r3, r3, #11
 472 0320 03F1FF33 		add	r3, r3, #-1
 473 0324 3B60     		str	r3, [r7, #0]
 576:../Dave/Generated/src/CLK001/CLK001.c **** 
 577:../Dave/Generated/src/CLK001/CLK001.c ****       /* Setup Divider settings for main PLL */
 578:../Dave/Generated/src/CLK001/CLK001.c **** 
 579:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_PLL->PLLCON1 = (((uint32_t)CLK001_PLL_K1DIV) | \
 474              		.loc 1 579 0
 475 0326 44F21073 		movw	r3, #18192
 476 032a C5F20003 		movt	r3, 20480
 580:../Dave/Generated/src/CLK001/CLK001.c ****                         ((uint32_t)CLK001_PLL_NDIV<<SCU_PLL_PLLCON1_NDIV_Pos)| \
 581:../Dave/Generated/src/CLK001/CLK001.c ****               ((uint32_t)stepping_K2DIV<<SCU_PLL_PLLCON1_K2DIV_Pos)| \
 477              		.loc 1 581 0
 478 032e 3A68     		ldr	r2, [r7, #0]
 479 0330 4FEA0242 		lsl	r2, r2, #16
 480 0334 42F41C52 		orr	r2, r2, #9984
 579:../Dave/Generated/src/CLK001/CLK001.c ****       SCU_PLL->PLLCON1 = (((uint32_t)CLK001_PLL_K1DIV) | \
 481              		.loc 1 579 0
 482 0338 9A60     		str	r2, [r3, #8]
 582:../Dave/Generated/src/CLK001/CLK001.c ****               ((uint32_t)CLK001_PLL_PDIV<<SCU_PLL_PLLCON1_PDIV_Pos));
 583:../Dave/Generated/src/CLK001/CLK001.c ****     }
 584:../Dave/Generated/src/CLK001/CLK001.c **** #endif /*end of check if PLL target frequency is more than 90 MHz*/
 585:../Dave/Generated/src/CLK001/CLK001.c **** 
 586:../Dave/Generated/src/CLK001/CLK001.c ****     /*********************************************************/
 587:../Dave/Generated/src/CLK001/CLK001.c ****     /* Delay for next K2 step ~50?s */
 588:../Dave/Generated/src/CLK001/CLK001.c ****     /*********************************************************/
 589:../Dave/Generated/src/CLK001/CLK001.c **** 
 590:../Dave/Generated/src/CLK001/CLK001.c ****     Delay(CLK001_DELAY_CNT_50US_90MHZ); /*~50us @ 90 MHz clock*/
 483              		.loc 1 590 0
 484 033a 4FF09600 		mov	r0, #150
 485 033e FFF7FEFF 		bl	Delay
 591:../Dave/Generated/src/CLK001/CLK001.c **** 
 592:../Dave/Generated/src/CLK001/CLK001.c ****     /*********************************************************/
 593:../Dave/Generated/src/CLK001/CLK001.c **** 
 594:../Dave/Generated/src/CLK001/CLK001.c ****     /* Setup Divider settings for main PLL */
 595:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_PLL->PLLCON1 = (((uint32_t)CLK001_PLL_K1DIV) | \
 486              		.loc 1 595 0
 487 0342 44F21073 		movw	r3, #18192
 488 0346 C5F20003 		movt	r3, 20480
 489 034a 4FF41C52 		mov	r2, #9984
 490 034e C0F20302 		movt	r2, 3
 491 0352 9A60     		str	r2, [r3, #8]
 596:../Dave/Generated/src/CLK001/CLK001.c ****             ((uint32_t)CLK001_PLL_NDIV<<SCU_PLL_PLLCON1_NDIV_Pos)  | \
 597:../Dave/Generated/src/CLK001/CLK001.c ****             ((uint32_t)CLK001_PLL_K2DIV<<SCU_PLL_PLLCON1_K2DIV_Pos)| \
 598:../Dave/Generated/src/CLK001/CLK001.c ****             ((uint32_t)CLK001_PLL_PDIV<<SCU_PLL_PLLCON1_PDIV_Pos));
 599:../Dave/Generated/src/CLK001/CLK001.c ****             
 600:../Dave/Generated/src/CLK001/CLK001.c ****     /* clear request for System OCS Watchdog Trap and System VCO Lock Trap  */
 601:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk |\
 492              		.loc 1 601 0
 493 0354 44F26013 		movw	r3, #16736
 494 0358 C5F20003 		movt	r3, 20480
 495 035c 4FF00502 		mov	r2, #5
 496 0360 DA60     		str	r2, [r3, #12]
 602:../Dave/Generated/src/CLK001/CLK001.c ****                         SCU_TRAP_TRAPCLR_SVCOLCKT_Msk; 
 603:../Dave/Generated/src/CLK001/CLK001.c ****   }/*end PLL frequency stepping...*/
 604:../Dave/Generated/src/CLK001/CLK001.c **** #endif /*end of PLL frequency stepping in case of PLL normal mode*/
 605:../Dave/Generated/src/CLK001/CLK001.c ****    /*return success*/
 606:../Dave/Generated/src/CLK001/CLK001.c ****   return Return_status;
 497              		.loc 1 606 0
 498 0362 FB68     		ldr	r3, [r7, #12]
 607:../Dave/Generated/src/CLK001/CLK001.c **** }
 499              		.loc 1 607 0
 500 0364 1846     		mov	r0, r3
 501 0366 07F11007 		add	r7, r7, #16
 502 036a BD46     		mov	sp, r7
 503 036c 80BD     		pop	{r7, pc}
 504              		.cfi_endproc
 505              	.LFE114:
 507 036e 00BF     		.section	.text.RTC_Clock_init,"ax",%progbits
 508              		.align	2
 509              		.thumb
 510              		.thumb_func
 512              	RTC_Clock_init:
 513              	.LFB115:
 608:../Dave/Generated/src/CLK001/CLK001.c **** 
 609:../Dave/Generated/src/CLK001/CLK001.c **** 
 610:../Dave/Generated/src/CLK001/CLK001.c **** 
 611:../Dave/Generated/src/CLK001/CLK001.c **** 
 612:../Dave/Generated/src/CLK001/CLK001.c **** 
 613:../Dave/Generated/src/CLK001/CLK001.c **** 
 614:../Dave/Generated/src/CLK001/CLK001.c **** /**
 615:../Dave/Generated/src/CLK001/CLK001.c ****   * @brief  Function to initialize the RTC clock based on UI configuration
 616:../Dave/Generated/src/CLK001/CLK001.c ****   * @note   -  
 617:../Dave/Generated/src/CLK001/CLK001.c ****   * @param  None
 618:../Dave/Generated/src/CLK001/CLK001.c ****   * @retval None
 619:../Dave/Generated/src/CLK001/CLK001.c ****   */
 620:../Dave/Generated/src/CLK001/CLK001.c **** static void RTC_Clock_init(void)
 621:../Dave/Generated/src/CLK001/CLK001.c **** {
 514              		.loc 1 621 0
 515              		.cfi_startproc
 516              		@ args = 0, pretend = 0, frame = 0
 517              		@ frame_needed = 1, uses_anonymous_args = 0
 518              		@ link register save eliminated.
 519 0000 80B4     		push	{r7}
 520              	.LCFI9:
 521              		.cfi_def_cfa_offset 4
 522              		.cfi_offset 7, -4
 523 0002 00AF     		add	r7, sp, #0
 524              	.LCFI10:
 525              		.cfi_def_cfa_register 7
 622:../Dave/Generated/src/CLK001/CLK001.c ****   /*before enabling hibernate domain (if opted), check if it is already enabled.
 623:../Dave/Generated/src/CLK001/CLK001.c ****   we do not repeat the enable if already done*/
 624:../Dave/Generated/src/CLK001/CLK001.c ****   if((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0U )
 526              		.loc 1 624 0
 527 0004 4FF48443 		mov	r3, #16896
 528 0008 C5F20003 		movt	r3, 20480
 529 000c 1B68     		ldr	r3, [r3, #0]
 530 000e 03F00103 		and	r3, r3, #1
 531 0012 002B     		cmp	r3, #0
 532 0014 10D1     		bne	.L19
 625:../Dave/Generated/src/CLK001/CLK001.c ****   {
 626:../Dave/Generated/src/CLK001/CLK001.c ****     /* Enable hibernate domain */
 627:../Dave/Generated/src/CLK001/CLK001.c ****     SCU_POWER->PWRSET = (uint32_t)(SCU_POWER_PWRSET_HIB_Msk);
 533              		.loc 1 627 0
 534 0016 4FF48443 		mov	r3, #16896
 535 001a C5F20003 		movt	r3, 20480
 536 001e 4FF00102 		mov	r2, #1
 537 0022 5A60     		str	r2, [r3, #4]
 628:../Dave/Generated/src/CLK001/CLK001.c ****     
 629:../Dave/Generated/src/CLK001/CLK001.c ****     /* Wait until hibernate enable status is set */
 630:../Dave/Generated/src/CLK001/CLK001.c ****     while((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk)!= \
 538              		.loc 1 630 0
 539 0024 00BF     		nop
 540              	.L20:
 541              		.loc 1 630 0 is_stmt 0 discriminator 1
 542 0026 4FF48443 		mov	r3, #16896
 543 002a C5F20003 		movt	r3, 20480
 544 002e 1B68     		ldr	r3, [r3, #0]
 545 0030 03F00103 		and	r3, r3, #1
 546 0034 002B     		cmp	r3, #0
 547 0036 F6D0     		beq	.L20
 548              	.L19:
 631:../Dave/Generated/src/CLK001/CLK001.c ****          SCU_POWER_PWRSTAT_HIBEN_Msk)
 632:../Dave/Generated/src/CLK001/CLK001.c ****     {}
 633:../Dave/Generated/src/CLK001/CLK001.c ****   }
 634:../Dave/Generated/src/CLK001/CLK001.c ****   /* check for HIB Domain is not in reset state  */
 635:../Dave/Generated/src/CLK001/CLK001.c ****   if ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0U)
 549              		.loc 1 635 0 is_stmt 1
 550 0038 4FF48843 		mov	r3, #17408
 551 003c C5F20003 		movt	r3, 20480
 552 0040 1B68     		ldr	r3, [r3, #0]
 553 0042 03F40073 		and	r3, r3, #512
 554 0046 002B     		cmp	r3, #0
 555 0048 0BD0     		beq	.L21
 636:../Dave/Generated/src/CLK001/CLK001.c ****   {
 637:../Dave/Generated/src/CLK001/CLK001.c **** 	  SCU_RESET->RSTCLR |= (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk; /*de-assert hibernate reset*/
 556              		.loc 1 637 0
 557 004a 4FF48843 		mov	r3, #17408
 558 004e C5F20003 		movt	r3, 20480
 559 0052 4FF48842 		mov	r2, #17408
 560 0056 C5F20002 		movt	r2, 20480
 561 005a 9268     		ldr	r2, [r2, #8]
 562 005c 42F40072 		orr	r2, r2, #512
 563 0060 9A60     		str	r2, [r3, #8]
 564              	.L21:
 638:../Dave/Generated/src/CLK001/CLK001.c ****   }
 639:../Dave/Generated/src/CLK001/CLK001.c ****   /*RTC Clock Source Selection*/   
 640:../Dave/Generated/src/CLK001/CLK001.c ****     /* Enable internal slow clock */
 641:../Dave/Generated/src/CLK001/CLK001.c **** 	/*Selecting RTC Clock Source*/
 642:../Dave/Generated/src/CLK001/CLK001.c ****   SCU_HIBERNATE->HDCR |=   ((0UL << ((uint32_t)SCU_HIBERNATE_HDCR_RCS_Pos)) & \
 565              		.loc 1 642 0
 566 0062 4FF48643 		mov	r3, #17152
 567 0066 C5F20003 		movt	r3, 20480
 568 006a 4FF48642 		mov	r2, #17152
 569 006e C5F20002 		movt	r2, 20480
 570 0072 D268     		ldr	r2, [r2, #12]
 571 0074 DA60     		str	r2, [r3, #12]
 643:../Dave/Generated/src/CLK001/CLK001.c ****                          ((uint32_t)SCU_HIBERNATE_HDCR_RCS_Msk)); 
 644:../Dave/Generated/src/CLK001/CLK001.c ****   while((SCU_INTERRUPT->SRRAW & SCU_INTERRUPT_SRRAW_HDCR_Msk)!= \
 572              		.loc 1 644 0
 573 0076 00BF     		nop
 574              	.L22:
 575              		.loc 1 644 0 is_stmt 0 discriminator 1
 576 0078 44F27403 		movw	r3, #16500
 577 007c C5F20003 		movt	r3, 20480
 578 0080 5B68     		ldr	r3, [r3, #4]
 579 0082 03F40023 		and	r3, r3, #524288
 580 0086 002B     		cmp	r3, #0
 581 0088 F6D0     		beq	.L22
 645:../Dave/Generated/src/CLK001/CLK001.c ****          SCU_INTERRUPT_SRRAW_HDCR_Msk)
 646:../Dave/Generated/src/CLK001/CLK001.c ****   {}
 647:../Dave/Generated/src/CLK001/CLK001.c ****   SCU_INTERRUPT->SRCLR |= (uint32_t)SCU_INTERRUPT_SRCLR_HDCR_Msk;
 582              		.loc 1 647 0 is_stmt 1
 583 008a 44F27403 		movw	r3, #16500
 584 008e C5F20003 		movt	r3, 20480
 585 0092 44F27402 		movw	r2, #16500
 586 0096 C5F20002 		movt	r2, 20480
 587 009a D268     		ldr	r2, [r2, #12]
 588 009c 42F40022 		orr	r2, r2, #524288
 589 00a0 DA60     		str	r2, [r3, #12]
 648:../Dave/Generated/src/CLK001/CLK001.c **** 	
 649:../Dave/Generated/src/CLK001/CLK001.c **** }
 590              		.loc 1 649 0
 591 00a2 BD46     		mov	sp, r7
 592 00a4 80BC     		pop	{r7}
 593 00a6 7047     		bx	lr
 594              		.cfi_endproc
 595              	.LFE115:
 597              		.section	.text.CLK001_Init,"ax",%progbits
 598              		.align	2
 599              		.global	CLK001_Init
 600              		.thumb
 601              		.thumb_func
 603              	CLK001_Init:
 604              	.LFB116:
 650:../Dave/Generated/src/CLK001/CLK001.c ****   
 651:../Dave/Generated/src/CLK001/CLK001.c **** 
 652:../Dave/Generated/src/CLK001/CLK001.c **** /*******************************************************************************
 653:../Dave/Generated/src/CLK001/CLK001.c **** **                      Public Function Definitions                           **
 654:../Dave/Generated/src/CLK001/CLK001.c **** *******************************************************************************/
 655:../Dave/Generated/src/CLK001/CLK001.c **** 
 656:../Dave/Generated/src/CLK001/CLK001.c **** /**
 657:../Dave/Generated/src/CLK001/CLK001.c ****   * @brief  Function to initialize the Clock Tree based on UI configuration
 658:../Dave/Generated/src/CLK001/CLK001.c ****   * @note   -  
 659:../Dave/Generated/src/CLK001/CLK001.c ****   * @param  None
 660:../Dave/Generated/src/CLK001/CLK001.c ****   * @retval None
 661:../Dave/Generated/src/CLK001/CLK001.c ****   */
 662:../Dave/Generated/src/CLK001/CLK001.c **** void CLK001_Init(void)
 663:../Dave/Generated/src/CLK001/CLK001.c **** {
 605              		.loc 1 663 0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 0
 608              		@ frame_needed = 1, uses_anonymous_args = 0
 609 0000 80B5     		push	{r7, lr}
 610              	.LCFI11:
 611              		.cfi_def_cfa_offset 8
 612              		.cfi_offset 7, -8
 613              		.cfi_offset 14, -4
 614 0002 00AF     		add	r7, sp, #0
 615              	.LCFI12:
 616              		.cfi_def_cfa_register 7
 664:../Dave/Generated/src/CLK001/CLK001.c ****   /*<<<DD_CLK001_API_1>>>*/
 665:../Dave/Generated/src/CLK001/CLK001.c ****  /*  Function to check the clock status based on UI configuration */
 666:../Dave/Generated/src/CLK001/CLK001.c ****   if(System_Clock_valid() == 0U)
 617              		.loc 1 666 0
 618 0004 FFF7FEFF 		bl	System_Clock_valid
 619 0008 0346     		mov	r3, r0
 620 000a 002B     		cmp	r3, #0
 621 000c 01D1     		bne	.L24
 667:../Dave/Generated/src/CLK001/CLK001.c ****   {   
 668:../Dave/Generated/src/CLK001/CLK001.c ****     /*  Function to initialize the System Clock based on UI configuration */
 669:../Dave/Generated/src/CLK001/CLK001.c ****     System_Clock_init();
 622              		.loc 1 669 0
 623 000e FFF7FEFF 		bl	System_Clock_init
 624              	.L24:
 670:../Dave/Generated/src/CLK001/CLK001.c ****   } 
 671:../Dave/Generated/src/CLK001/CLK001.c **** 
 672:../Dave/Generated/src/CLK001/CLK001.c **** 
 673:../Dave/Generated/src/CLK001/CLK001.c ****  
 674:../Dave/Generated/src/CLK001/CLK001.c ****    /*  Function to initialize the RTC Clock based on UI configuration */     
 675:../Dave/Generated/src/CLK001/CLK001.c ****   RTC_Clock_init();   
 625              		.loc 1 675 0
 626 0012 FFF7FEFF 		bl	RTC_Clock_init
 676:../Dave/Generated/src/CLK001/CLK001.c ****   /* Update the clock variable */
 677:../Dave/Generated/src/CLK001/CLK001.c ****   SystemCoreClockUpdate();
 627              		.loc 1 677 0
 628 0016 FFF7FEFF 		bl	SystemCoreClockUpdate
 678:../Dave/Generated/src/CLK001/CLK001.c **** }
 629              		.loc 1 678 0
 630 001a 80BD     		pop	{r7, pc}
 631              		.cfi_endproc
 632              	.LFE116:
 634              		.section	.text.AllowPLLInitByStartup,"ax",%progbits
 635              		.align	2
 636              		.global	AllowPLLInitByStartup
 637              		.thumb
 638              		.thumb_func
 640              	AllowPLLInitByStartup:
 641              	.LFB117:
 679:../Dave/Generated/src/CLK001/CLK001.c **** 
 680:../Dave/Generated/src/CLK001/CLK001.c **** /*
 681:../Dave/Generated/src/CLK001/CLK001.c ****  * This routine is called by CMSIS startup to find out if clock tree setup should
 682:../Dave/Generated/src/CLK001/CLK001.c ****  * be done by it. This routine is WEAKLY defined in CStart.
 683:../Dave/Generated/src/CLK001/CLK001.c ****  *
 684:../Dave/Generated/src/CLK001/CLK001.c ****  * In the absence of clock app, the weak definition takes precedence which always
 685:../Dave/Generated/src/CLK001/CLK001.c ****  * permits clock tree setup by CStart.
 686:../Dave/Generated/src/CLK001/CLK001.c ****  *
 687:../Dave/Generated/src/CLK001/CLK001.c ****  * When clock app is defined, this function overrides the CStart definition.Clock
 688:../Dave/Generated/src/CLK001/CLK001.c ****  * tree setup is launched and upon completion, control is ceded back to CStart.
 689:../Dave/Generated/src/CLK001/CLK001.c ****  *
 690:../Dave/Generated/src/CLK001/CLK001.c ****  * CStart abstains from setting up clock tree and instead proceeds with program
 691:../Dave/Generated/src/CLK001/CLK001.c ****  * loading.
 692:../Dave/Generated/src/CLK001/CLK001.c ****  *
 693:../Dave/Generated/src/CLK001/CLK001.c ****  * Return 0 to disallow CStart from performing clock tree setup.
 694:../Dave/Generated/src/CLK001/CLK001.c ****  */
 695:../Dave/Generated/src/CLK001/CLK001.c **** uint32_t AllowPLLInitByStartup(void)
 696:../Dave/Generated/src/CLK001/CLK001.c **** {
 642              		.loc 1 696 0
 643              		.cfi_startproc
 644              		@ args = 0, pretend = 0, frame = 0
 645              		@ frame_needed = 1, uses_anonymous_args = 0
 646              		@ link register save eliminated.
 647 0000 80B4     		push	{r7}
 648              	.LCFI13:
 649              		.cfi_def_cfa_offset 4
 650              		.cfi_offset 7, -4
 651 0002 00AF     		add	r7, sp, #0
 652              	.LCFI14:
 653              		.cfi_def_cfa_register 7
 697:../Dave/Generated/src/CLK001/CLK001.c **** 	/*
 698:../Dave/Generated/src/CLK001/CLK001.c **** 	 * Let the CStart know that there is no more a need to perform clock tree
 699:../Dave/Generated/src/CLK001/CLK001.c **** 	 * initialization.
 700:../Dave/Generated/src/CLK001/CLK001.c **** 	 */
 701:../Dave/Generated/src/CLK001/CLK001.c **** 	return 0U;
 654              		.loc 1 701 0
 655 0004 4FF00003 		mov	r3, #0
 702:../Dave/Generated/src/CLK001/CLK001.c **** }
 656              		.loc 1 702 0
 657 0008 1846     		mov	r0, r3
 658 000a BD46     		mov	sp, r7
 659 000c 80BC     		pop	{r7}
 660 000e 7047     		bx	lr
 661              		.cfi_endproc
 662              	.LFE117:
 664              		.text
 665              	.Letext0:
 666              		.file 3 "c:\\dave-3.1.8\\dave-3.1.8\\arm-gcc\\bin\\../lib/gcc/arm-none-eabi/4.7.4/../../../../arm-
 667              		.file 4 "C:\\DAVE-3.1.8\\DAVE-3.1.8\\eclipse\\/../CMSIS/Infineon/XMC4500_series/Include/XMC4500.h"
 668              		.file 5 "C:\\DAVE-3.1.8\\DAVE-3.1.8\\eclipse\\/../CMSIS/Include/core_cm4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 CLK001.c
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp\ccNzR94S.s:20     .text.Delay:00000000 $t
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp\ccNzR94S.s:24     .text.Delay:00000000 Delay
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp\ccNzR94S.s:104    .text.System_Clock_valid:00000000 $t
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp\ccNzR94S.s:108    .text.System_Clock_valid:00000000 System_Clock_valid
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp\ccNzR94S.s:153    .text.System_Clock_init:00000000 $t
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp\ccNzR94S.s:157    .text.System_Clock_init:00000000 System_Clock_init
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp\ccNzR94S.s:508    .text.RTC_Clock_init:00000000 $t
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp\ccNzR94S.s:512    .text.RTC_Clock_init:00000000 RTC_Clock_init
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp\ccNzR94S.s:598    .text.CLK001_Init:00000000 $t
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp\ccNzR94S.s:603    .text.CLK001_Init:00000000 CLK001_Init
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp\ccNzR94S.s:635    .text.AllowPLLInitByStartup:00000000 $t
C:\DOCUME~1\ADMINI~1\LOCALS~1\Temp\ccNzR94S.s:640    .text.AllowPLLInitByStartup:00000000 AllowPLLInitByStartup
                     .debug_frame:00000010 $d
                           .group:00000000 wm4.1.2b180dddedb01d2657948e7c599ffc4b
                           .group:00000000 wm4.XMC4500.h.45.215f4b8c79f46c7645c15373868d08c0
                           .group:00000000 wm4.core_cm4.h.47.41af406cb4cda82c972f112a9cd0a024
                           .group:00000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:00000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:00000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:00000000 wm4._ansi.h.23.7aefdac4826acebbfc9f3822a0aeb14c
                           .group:00000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:00000000 wm4.core_cmInstr.h.39.3d3d1b4a79aef37532666dc6ee87c6ac
                           .group:00000000 wm4.core_cm4_simd.h.43.b5d1d38735af6366227b4256d330cf13
                           .group:00000000 wm4.core_cm4.h.178.e5ef5ce66d198d7f00f9d0076e267c41
                           .group:00000000 wm4.system_XMC4500.h.29.827f68baa362c84f2abae4ab67dde7c9
                           .group:00000000 wm4.XMC4500.h.198.8e022f279ff353ed081df898dc7b9cf3
                           .group:00000000 wm4.stddef.h.40.50cf36416e06376af8a9dca28536f2e4
                           .group:00000000 wm4.types.h.56.306df69fa5fe20f9057853cf3efa51a9
                           .group:00000000 wm4.MULTIPLEXER.h.45.f64ca92d72393a8beea4bac839d9ba32
                           .group:00000000 wm4.CCU8PWMLIB.h.69.6fc7028fa5cec90e04e15540cf2324e9
                           .group:00000000 wm4.MOTORLIB.h.62.951091d95913dd2ff36d761323a1771d
                           .group:00000000 wm4.DBG001.h.116.d6d9e7459a0faa3905c97c1d2edb339d
                           .group:00000000 wm4.CAN_Types.h.39.c1885d4e8823aca0b17273f52e39394e
                           .group:00000000 wm4.CAN001.h.73.2867c30dc9ce1f649c22907bb7f1ae00
                           .group:00000000 wm4.CAN001_Conf.h.47.6b224a0bfbf8bcde5b198cce051155fa
                           .group:00000000 wm4.CAN001.h.1156.897d05c6ebe0c8769b48e0de7c315928
                           .group:00000000 wm4.NVIC002.h.59.48c35978ed54e4015de10feda9cef27c

UNDEFINED SYMBOLS
SystemCoreClockUpdate
